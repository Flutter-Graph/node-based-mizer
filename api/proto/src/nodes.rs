// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `nodes.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct NodesRequest {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NodesRequest {
    fn default() -> &'a NodesRequest {
        <NodesRequest as ::protobuf::Message>::default_instance()
    }
}

impl NodesRequest {
    pub fn new() -> NodesRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for NodesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NodesRequest {
        NodesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<NodesRequest>(
                "NodesRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static NodesRequest {
        static instance: ::protobuf::rt::LazyV2<NodesRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(NodesRequest::new)
    }
}

impl ::protobuf::Clear for NodesRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NodesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NodesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Nodes {
    // message fields
    pub nodes: ::protobuf::RepeatedField<Node>,
    pub channels: ::protobuf::RepeatedField<NodeConnection>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Nodes {
    fn default() -> &'a Nodes {
        <Nodes as ::protobuf::Message>::default_instance()
    }
}

impl Nodes {
    pub fn new() -> Nodes {
        ::std::default::Default::default()
    }

    // repeated .mizer.Node nodes = 1;


    pub fn get_nodes(&self) -> &[Node] {
        &self.nodes
    }
    pub fn clear_nodes(&mut self) {
        self.nodes.clear();
    }

    // Param is passed by value, moved
    pub fn set_nodes(&mut self, v: ::protobuf::RepeatedField<Node>) {
        self.nodes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_nodes(&mut self) -> &mut ::protobuf::RepeatedField<Node> {
        &mut self.nodes
    }

    // Take field
    pub fn take_nodes(&mut self) -> ::protobuf::RepeatedField<Node> {
        ::std::mem::replace(&mut self.nodes, ::protobuf::RepeatedField::new())
    }

    // repeated .mizer.NodeConnection channels = 2;


    pub fn get_channels(&self) -> &[NodeConnection] {
        &self.channels
    }
    pub fn clear_channels(&mut self) {
        self.channels.clear();
    }

    // Param is passed by value, moved
    pub fn set_channels(&mut self, v: ::protobuf::RepeatedField<NodeConnection>) {
        self.channels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_channels(&mut self) -> &mut ::protobuf::RepeatedField<NodeConnection> {
        &mut self.channels
    }

    // Take field
    pub fn take_channels(&mut self) -> ::protobuf::RepeatedField<NodeConnection> {
        ::std::mem::replace(&mut self.channels, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Nodes {
    fn is_initialized(&self) -> bool {
        for v in &self.nodes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.channels {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.nodes)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.channels)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.nodes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.channels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.nodes {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.channels {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Nodes {
        Nodes::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Node>>(
                "nodes",
                |m: &Nodes| { &m.nodes },
                |m: &mut Nodes| { &mut m.nodes },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<NodeConnection>>(
                "channels",
                |m: &Nodes| { &m.channels },
                |m: &mut Nodes| { &mut m.channels },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Nodes>(
                "Nodes",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Nodes {
        static instance: ::protobuf::rt::LazyV2<Nodes> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Nodes::new)
    }
}

impl ::protobuf::Clear for Nodes {
    fn clear(&mut self) {
        self.nodes.clear();
        self.channels.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Nodes {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Nodes {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct NodeConnection {
    // message fields
    pub inputNode: ::std::string::String,
    pub inputPort: ::protobuf::SingularPtrField<Port>,
    pub outputNode: ::std::string::String,
    pub outputPort: ::protobuf::SingularPtrField<Port>,
    pub protocol: ChannelProtocol,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NodeConnection {
    fn default() -> &'a NodeConnection {
        <NodeConnection as ::protobuf::Message>::default_instance()
    }
}

impl NodeConnection {
    pub fn new() -> NodeConnection {
        ::std::default::Default::default()
    }

    // string inputNode = 1;


    pub fn get_inputNode(&self) -> &str {
        &self.inputNode
    }
    pub fn clear_inputNode(&mut self) {
        self.inputNode.clear();
    }

    // Param is passed by value, moved
    pub fn set_inputNode(&mut self, v: ::std::string::String) {
        self.inputNode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inputNode(&mut self) -> &mut ::std::string::String {
        &mut self.inputNode
    }

    // Take field
    pub fn take_inputNode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.inputNode, ::std::string::String::new())
    }

    // .mizer.Port inputPort = 2;


    pub fn get_inputPort(&self) -> &Port {
        self.inputPort.as_ref().unwrap_or_else(|| <Port as ::protobuf::Message>::default_instance())
    }
    pub fn clear_inputPort(&mut self) {
        self.inputPort.clear();
    }

    pub fn has_inputPort(&self) -> bool {
        self.inputPort.is_some()
    }

    // Param is passed by value, moved
    pub fn set_inputPort(&mut self, v: Port) {
        self.inputPort = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inputPort(&mut self) -> &mut Port {
        if self.inputPort.is_none() {
            self.inputPort.set_default();
        }
        self.inputPort.as_mut().unwrap()
    }

    // Take field
    pub fn take_inputPort(&mut self) -> Port {
        self.inputPort.take().unwrap_or_else(|| Port::new())
    }

    // string outputNode = 3;


    pub fn get_outputNode(&self) -> &str {
        &self.outputNode
    }
    pub fn clear_outputNode(&mut self) {
        self.outputNode.clear();
    }

    // Param is passed by value, moved
    pub fn set_outputNode(&mut self, v: ::std::string::String) {
        self.outputNode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_outputNode(&mut self) -> &mut ::std::string::String {
        &mut self.outputNode
    }

    // Take field
    pub fn take_outputNode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.outputNode, ::std::string::String::new())
    }

    // .mizer.Port outputPort = 4;


    pub fn get_outputPort(&self) -> &Port {
        self.outputPort.as_ref().unwrap_or_else(|| <Port as ::protobuf::Message>::default_instance())
    }
    pub fn clear_outputPort(&mut self) {
        self.outputPort.clear();
    }

    pub fn has_outputPort(&self) -> bool {
        self.outputPort.is_some()
    }

    // Param is passed by value, moved
    pub fn set_outputPort(&mut self, v: Port) {
        self.outputPort = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_outputPort(&mut self) -> &mut Port {
        if self.outputPort.is_none() {
            self.outputPort.set_default();
        }
        self.outputPort.as_mut().unwrap()
    }

    // Take field
    pub fn take_outputPort(&mut self) -> Port {
        self.outputPort.take().unwrap_or_else(|| Port::new())
    }

    // .mizer.ChannelProtocol protocol = 5;


    pub fn get_protocol(&self) -> ChannelProtocol {
        self.protocol
    }
    pub fn clear_protocol(&mut self) {
        self.protocol = ChannelProtocol::Dmx;
    }

    // Param is passed by value, moved
    pub fn set_protocol(&mut self, v: ChannelProtocol) {
        self.protocol = v;
    }
}

impl ::protobuf::Message for NodeConnection {
    fn is_initialized(&self) -> bool {
        for v in &self.inputPort {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.outputPort {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.inputNode)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.inputPort)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.outputNode)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.outputPort)?;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.protocol, 5, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.inputNode.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.inputNode);
        }
        if let Some(ref v) = self.inputPort.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.outputNode.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.outputNode);
        }
        if let Some(ref v) = self.outputPort.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.protocol != ChannelProtocol::Dmx {
            my_size += ::protobuf::rt::enum_size(5, self.protocol);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.inputNode.is_empty() {
            os.write_string(1, &self.inputNode)?;
        }
        if let Some(ref v) = self.inputPort.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.outputNode.is_empty() {
            os.write_string(3, &self.outputNode)?;
        }
        if let Some(ref v) = self.outputPort.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.protocol != ChannelProtocol::Dmx {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&self.protocol))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NodeConnection {
        NodeConnection::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "inputNode",
                |m: &NodeConnection| { &m.inputNode },
                |m: &mut NodeConnection| { &mut m.inputNode },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Port>>(
                "inputPort",
                |m: &NodeConnection| { &m.inputPort },
                |m: &mut NodeConnection| { &mut m.inputPort },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "outputNode",
                |m: &NodeConnection| { &m.outputNode },
                |m: &mut NodeConnection| { &mut m.outputNode },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Port>>(
                "outputPort",
                |m: &NodeConnection| { &m.outputPort },
                |m: &mut NodeConnection| { &mut m.outputPort },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ChannelProtocol>>(
                "protocol",
                |m: &NodeConnection| { &m.protocol },
                |m: &mut NodeConnection| { &mut m.protocol },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<NodeConnection>(
                "NodeConnection",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static NodeConnection {
        static instance: ::protobuf::rt::LazyV2<NodeConnection> = ::protobuf::rt::LazyV2::INIT;
        instance.get(NodeConnection::new)
    }
}

impl ::protobuf::Clear for NodeConnection {
    fn clear(&mut self) {
        self.inputNode.clear();
        self.inputPort.clear();
        self.outputNode.clear();
        self.outputPort.clear();
        self.protocol = ChannelProtocol::Dmx;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NodeConnection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NodeConnection {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Node {
    // message fields
    pub field_type: Node_NodeType,
    pub id: ::std::string::String,
    pub title: ::std::string::String,
    pub inputs: ::protobuf::RepeatedField<Port>,
    pub outputs: ::protobuf::RepeatedField<Port>,
    pub properties: ::std::collections::HashMap<::std::string::String, f64>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Node {
    fn default() -> &'a Node {
        <Node as ::protobuf::Message>::default_instance()
    }
}

impl Node {
    pub fn new() -> Node {
        ::std::default::Default::default()
    }

    // .mizer.Node.NodeType type = 1;


    pub fn get_field_type(&self) -> Node_NodeType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = Node_NodeType::ArtnetOutput;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Node_NodeType) {
        self.field_type = v;
    }

    // string id = 2;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string title = 3;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // repeated .mizer.Port inputs = 4;


    pub fn get_inputs(&self) -> &[Port] {
        &self.inputs
    }
    pub fn clear_inputs(&mut self) {
        self.inputs.clear();
    }

    // Param is passed by value, moved
    pub fn set_inputs(&mut self, v: ::protobuf::RepeatedField<Port>) {
        self.inputs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_inputs(&mut self) -> &mut ::protobuf::RepeatedField<Port> {
        &mut self.inputs
    }

    // Take field
    pub fn take_inputs(&mut self) -> ::protobuf::RepeatedField<Port> {
        ::std::mem::replace(&mut self.inputs, ::protobuf::RepeatedField::new())
    }

    // repeated .mizer.Port outputs = 5;


    pub fn get_outputs(&self) -> &[Port] {
        &self.outputs
    }
    pub fn clear_outputs(&mut self) {
        self.outputs.clear();
    }

    // Param is passed by value, moved
    pub fn set_outputs(&mut self, v: ::protobuf::RepeatedField<Port>) {
        self.outputs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_outputs(&mut self) -> &mut ::protobuf::RepeatedField<Port> {
        &mut self.outputs
    }

    // Take field
    pub fn take_outputs(&mut self) -> ::protobuf::RepeatedField<Port> {
        ::std::mem::replace(&mut self.outputs, ::protobuf::RepeatedField::new())
    }

    // repeated .mizer.Node.PropertiesEntry properties = 7;


    pub fn get_properties(&self) -> &::std::collections::HashMap<::std::string::String, f64> {
        &self.properties
    }
    pub fn clear_properties(&mut self) {
        self.properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_properties(&mut self, v: ::std::collections::HashMap<::std::string::String, f64>) {
        self.properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_properties(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, f64> {
        &mut self.properties
    }

    // Take field
    pub fn take_properties(&mut self) -> ::std::collections::HashMap<::std::string::String, f64> {
        ::std::mem::replace(&mut self.properties, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for Node {
    fn is_initialized(&self) -> bool {
        for v in &self.inputs {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.outputs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.inputs)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.outputs)?;
                },
                7 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeDouble>(wire_type, is, &mut self.properties)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != Node_NodeType::ArtnetOutput {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.id);
        }
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.title);
        }
        for value in &self.inputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.outputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeDouble>(7, &self.properties);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != Node_NodeType::ArtnetOutput {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if !self.id.is_empty() {
            os.write_string(2, &self.id)?;
        }
        if !self.title.is_empty() {
            os.write_string(3, &self.title)?;
        }
        for v in &self.inputs {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.outputs {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeDouble>(7, &self.properties, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Node {
        Node::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Node_NodeType>>(
                "type",
                |m: &Node| { &m.field_type },
                |m: &mut Node| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Node| { &m.id },
                |m: &mut Node| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "title",
                |m: &Node| { &m.title },
                |m: &mut Node| { &mut m.title },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Port>>(
                "inputs",
                |m: &Node| { &m.inputs },
                |m: &mut Node| { &mut m.inputs },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Port>>(
                "outputs",
                |m: &Node| { &m.outputs },
                |m: &mut Node| { &mut m.outputs },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeDouble>(
                "properties",
                |m: &Node| { &m.properties },
                |m: &mut Node| { &mut m.properties },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Node>(
                "Node",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Node {
        static instance: ::protobuf::rt::LazyV2<Node> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Node::new)
    }
}

impl ::protobuf::Clear for Node {
    fn clear(&mut self) {
        self.field_type = Node_NodeType::ArtnetOutput;
        self.id.clear();
        self.title.clear();
        self.inputs.clear();
        self.outputs.clear();
        self.properties.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Node {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Node {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum Node_NodeType {
    ArtnetOutput = 0,
    ConvertToDmx = 1,
    Oscillator = 2,
    Clock = 3,
    OscInput = 4,
    Script = 5,
    SacnOutput = 6,
    Fixture = 7,
}

impl ::protobuf::ProtobufEnum for Node_NodeType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Node_NodeType> {
        match value {
            0 => ::std::option::Option::Some(Node_NodeType::ArtnetOutput),
            1 => ::std::option::Option::Some(Node_NodeType::ConvertToDmx),
            2 => ::std::option::Option::Some(Node_NodeType::Oscillator),
            3 => ::std::option::Option::Some(Node_NodeType::Clock),
            4 => ::std::option::Option::Some(Node_NodeType::OscInput),
            5 => ::std::option::Option::Some(Node_NodeType::Script),
            6 => ::std::option::Option::Some(Node_NodeType::SacnOutput),
            7 => ::std::option::Option::Some(Node_NodeType::Fixture),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Node_NodeType] = &[
            Node_NodeType::ArtnetOutput,
            Node_NodeType::ConvertToDmx,
            Node_NodeType::Oscillator,
            Node_NodeType::Clock,
            Node_NodeType::OscInput,
            Node_NodeType::Script,
            Node_NodeType::SacnOutput,
            Node_NodeType::Fixture,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Node_NodeType>("Node.NodeType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Node_NodeType {
}

impl ::std::default::Default for Node_NodeType {
    fn default() -> Self {
        Node_NodeType::ArtnetOutput
    }
}

impl ::protobuf::reflect::ProtobufValue for Node_NodeType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Port {
    // message fields
    pub name: ::std::string::String,
    pub protocol: ChannelProtocol,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Port {
    fn default() -> &'a Port {
        <Port as ::protobuf::Message>::default_instance()
    }
}

impl Port {
    pub fn new() -> Port {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .mizer.ChannelProtocol protocol = 2;


    pub fn get_protocol(&self) -> ChannelProtocol {
        self.protocol
    }
    pub fn clear_protocol(&mut self) {
        self.protocol = ChannelProtocol::Dmx;
    }

    // Param is passed by value, moved
    pub fn set_protocol(&mut self, v: ChannelProtocol) {
        self.protocol = v;
    }
}

impl ::protobuf::Message for Port {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.protocol, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.protocol != ChannelProtocol::Dmx {
            my_size += ::protobuf::rt::enum_size(2, self.protocol);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.protocol != ChannelProtocol::Dmx {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.protocol))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Port {
        Port::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Port| { &m.name },
                |m: &mut Port| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ChannelProtocol>>(
                "protocol",
                |m: &Port| { &m.protocol },
                |m: &mut Port| { &mut m.protocol },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Port>(
                "Port",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Port {
        static instance: ::protobuf::rt::LazyV2<Port> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Port::new)
    }
}

impl ::protobuf::Clear for Port {
    fn clear(&mut self) {
        self.name.clear();
        self.protocol = ChannelProtocol::Dmx;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Port {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Port {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum ChannelProtocol {
    Dmx = 0,
    Numeric = 1,
    Trigger = 2,
    Clock = 3,
    Video = 4,
    Color = 5,
    Vector = 6,
    Text = 7,
    Midi = 8,
    Timecode = 9,
    Boolean = 10,
    Select = 11,
    Pixels = 12,
}

impl ::protobuf::ProtobufEnum for ChannelProtocol {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ChannelProtocol> {
        match value {
            0 => ::std::option::Option::Some(ChannelProtocol::Dmx),
            1 => ::std::option::Option::Some(ChannelProtocol::Numeric),
            2 => ::std::option::Option::Some(ChannelProtocol::Trigger),
            3 => ::std::option::Option::Some(ChannelProtocol::Clock),
            4 => ::std::option::Option::Some(ChannelProtocol::Video),
            5 => ::std::option::Option::Some(ChannelProtocol::Color),
            6 => ::std::option::Option::Some(ChannelProtocol::Vector),
            7 => ::std::option::Option::Some(ChannelProtocol::Text),
            8 => ::std::option::Option::Some(ChannelProtocol::Midi),
            9 => ::std::option::Option::Some(ChannelProtocol::Timecode),
            10 => ::std::option::Option::Some(ChannelProtocol::Boolean),
            11 => ::std::option::Option::Some(ChannelProtocol::Select),
            12 => ::std::option::Option::Some(ChannelProtocol::Pixels),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ChannelProtocol] = &[
            ChannelProtocol::Dmx,
            ChannelProtocol::Numeric,
            ChannelProtocol::Trigger,
            ChannelProtocol::Clock,
            ChannelProtocol::Video,
            ChannelProtocol::Color,
            ChannelProtocol::Vector,
            ChannelProtocol::Text,
            ChannelProtocol::Midi,
            ChannelProtocol::Timecode,
            ChannelProtocol::Boolean,
            ChannelProtocol::Select,
            ChannelProtocol::Pixels,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ChannelProtocol>("ChannelProtocol", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ChannelProtocol {
}

impl ::std::default::Default for ChannelProtocol {
    fn default() -> Self {
        ChannelProtocol::Dmx
    }
}

impl ::protobuf::reflect::ProtobufValue for ChannelProtocol {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bnodes.proto\x12\x05mizer\"\x0e\n\x0cNodesRequest\"]\n\x05Nodes\x12\
    !\n\x05nodes\x18\x01\x20\x03(\x0b2\x0b.mizer.NodeR\x05nodes\x121\n\x08ch\
    annels\x18\x02\x20\x03(\x0b2\x15.mizer.NodeConnectionR\x08channels\"\xda\
    \x01\n\x0eNodeConnection\x12\x1c\n\tinputNode\x18\x01\x20\x01(\tR\tinput\
    Node\x12)\n\tinputPort\x18\x02\x20\x01(\x0b2\x0b.mizer.PortR\tinputPort\
    \x12\x1e\n\noutputNode\x18\x03\x20\x01(\tR\noutputNode\x12+\n\noutputPor\
    t\x18\x04\x20\x01(\x0b2\x0b.mizer.PortR\noutputPort\x122\n\x08protocol\
    \x18\x05\x20\x01(\x0e2\x16.mizer.ChannelProtocolR\x08protocol\"\xa1\x03\
    \n\x04Node\x12(\n\x04type\x18\x01\x20\x01(\x0e2\x14.mizer.Node.NodeTypeR\
    \x04type\x12\x0e\n\x02id\x18\x02\x20\x01(\tR\x02id\x12\x14\n\x05title\
    \x18\x03\x20\x01(\tR\x05title\x12#\n\x06inputs\x18\x04\x20\x03(\x0b2\x0b\
    .mizer.PortR\x06inputs\x12%\n\x07outputs\x18\x05\x20\x03(\x0b2\x0b.mizer\
    .PortR\x07outputs\x12;\n\nproperties\x18\x07\x20\x03(\x0b2\x1b.mizer.Nod\
    e.PropertiesEntryR\nproperties\x1a=\n\x0fPropertiesEntry\x12\x10\n\x03ke\
    y\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\x01R\
    \x05value:\x028\x01\"\x80\x01\n\x08NodeType\x12\x10\n\x0cArtnetOutput\
    \x10\0\x12\x10\n\x0cConvertToDmx\x10\x01\x12\x0e\n\nOscillator\x10\x02\
    \x12\t\n\x05Clock\x10\x03\x12\x0c\n\x08OscInput\x10\x04\x12\n\n\x06Scrip\
    t\x10\x05\x12\x0e\n\nSacnOutput\x10\x06\x12\x0b\n\x07Fixture\x10\x07\"N\
    \n\x04Port\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x122\n\x08proto\
    col\x18\x02\x20\x01(\x0e2\x16.mizer.ChannelProtocolR\x08protocol*\xa8\
    \x01\n\x0fChannelProtocol\x12\x07\n\x03Dmx\x10\0\x12\x0b\n\x07Numeric\
    \x10\x01\x12\x0b\n\x07Trigger\x10\x02\x12\t\n\x05Clock\x10\x03\x12\t\n\
    \x05Video\x10\x04\x12\t\n\x05Color\x10\x05\x12\n\n\x06Vector\x10\x06\x12\
    \x08\n\x04Text\x10\x07\x12\x08\n\x04Midi\x10\x08\x12\x0c\n\x08Timecode\
    \x10\t\x12\x0b\n\x07Boolean\x10\n\x12\n\n\x06Select\x10\x0b\x12\n\n\x06P\
    ixels\x10\x0c2;\n\x08NodesApi\x12/\n\x08GetNodes\x12\x13.mizer.NodesRequ\
    est\x1a\x0c.mizer.Nodes\"\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
