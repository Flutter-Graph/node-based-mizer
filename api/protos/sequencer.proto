syntax = "proto3";

package mizer.sequencer;

import "fixtures.proto";

service SequencerApi {
  rpc GetSequences (GetSequencesRequest) returns (Sequences) {}
  rpc GetSequence (GetSequenceRequest) returns (Sequence) {}
  rpc AddSequence (AddSequenceRequest) returns (Sequence) {}
  rpc DeleteSequence (DeleteSequenceRequest) returns (Sequences) {}
  rpc SequenceGo (SequenceGoRequest) returns (EmptyResponse) {}
  rpc UpdateCueTrigger (CueTriggerRequest) returns (Sequences) {}
  rpc UpdateCueName (CueNameRequest) returns (Sequences) {}
}

message GetSequencesRequest {}

message GetSequenceRequest {
  uint32 sequence = 1;
}

message AddSequenceRequest {
}

message DeleteSequenceRequest {
  uint32 sequence = 1;
}

message SequenceGoRequest {
  uint32 sequence = 1;
}

message CueTriggerRequest {
  uint32 sequence = 1;
  uint32 cue = 2;
  CueTrigger trigger = 3;
}

message CueNameRequest {
  uint32 sequence = 1;
  uint32 cue = 2;
  string name = 3;
}

message EmptyResponse {}

message Sequences {
  repeated Sequence sequences = 1;
}

message Sequence {
  uint32 id = 1;
  string name = 2;
  repeated Cue cues = 3;
  bool wrapAround = 4;
}

message Cue {
  uint32 id = 1;
  string name = 2;
  CueTrigger trigger = 3;
  bool loop = 4;
  repeated CueChannel channels = 5;
}

enum CueTrigger {
  GO = 0;
  FOLLOW = 1;
  TIME = 2;
  BEATS = 3;
  TIMECODE = 4;
}

message CueChannel {
  repeated mizer.fixtures.FixtureId fixtures = 1;
  CueControl control = 2;
  CueValue value = 3;
  CueTimer fade = 4;
  CueTimer delay = 5;
}

enum CueControl {
  INTENSITY = 0;
  SHUTTER = 1;
  COLOR_RED = 2;
  COLOR_GREEN = 3;
  COLOR_BLUE = 4;
  PAN = 5;
  TILT = 6;
  FOCUS = 7;
  ZOOM = 8;
  PRISM = 9;
  IRIS = 10;
  FROST = 11;
  GENERIC = 12;
}

message CueValue {
  oneof value {
    double direct = 3;
    CueValueRange range = 4;
  }
}

message CueTimer {
  bool hasTimer = 1;
  oneof timer {
    CueTime direct = 2;
    CueTimerRange range = 3;
  }
}

message CueValueRange {
  double from = 1;
  double to = 2;
}

message CueTime {
  oneof time {
    double seconds = 1;
    double beats = 2;
  }
}

message CueTimerRange {
  CueTime from = 1;
  CueTime to = 2;
}
