syntax = "proto3";

package mizer;

service NodesApi {
  rpc GetNodes (NodesRequest) returns (Nodes) {}
  rpc AddNode (AddNodeRequest) returns (Node) {}
  rpc AddLink (NodeConnection) returns (NodeConnection) {}
  rpc WriteControlValue (WriteControl) returns (WriteResponse) {}
}

message AddNodeRequest {
  Node.NodeType type = 1;
  NodePosition position = 2;
}

message NodesRequest {}

message WriteControl {
  string path = 1;
  string port = 2;
  double value = 3;
}

message WriteResponse {}

message Nodes {
  repeated Node nodes = 1;
  repeated NodeConnection channels = 2;
}

message NodeConnection {
  string targetNode = 1;
  Port targetPort = 2;
  string sourceNode = 3;
  Port sourcePort = 4;
  ChannelProtocol protocol = 5;
}

message Node {
  enum NodeType {
    Fader = 0;
    Button = 20;
    DmxOutput = 1;
    Oscillator = 2;
    Clock = 3;
    OscInput = 4;
    VideoFile = 5;
    VideoOutput = 6;
    VideoEffect = 7;
    VideoColorBalance = 8;
    VideoTransform = 9;
    Script = 10;
    PixelToDmx = 11;
    PixelPattern = 12;
    OpcOutput = 13;
    Fixture = 14;
    Sequence = 15;
    MidiInput = 16;
    MidiOutput = 17;
    Laser = 18;
    IldaFile = 19;
  }

  NodeType type = 1;
  string path = 2;
  repeated Port inputs = 3;
  repeated Port outputs = 4;
  NodeDesigner designer = 5;
  oneof NodeConfig {
    OscillatorNodeConfig oscillatorConfig = 6;
    ScriptingNodeConfig scriptingConfig = 7;
    SequenceNodeConfig sequenceConfig = 8;
    ClockNodeConfig clockConfig = 9;
    FixtureNodeConfig fixtureConfig = 10;
    InputNodeConfig buttonConfig = 11;
    InputNodeConfig faderConfig = 12;
    IldaFileNodeConfig ildaFileConfig = 15;
    LaserNodeConfig laserConfig = 16;
    PixelPatternNodeConfig pixelPatternConfig = 17;
    PixelDmxNodeConfig pixelDmxConfig = 18;
    DmxOutputNodeConfig dmxOutputConfig = 19;
    MidiInputNodeConfig midiInputConfig = 20;
    MidiOutputNodeConfig midiOutputConfig = 21;
    OpcOutputNodeConfig opcOutputConfig = 22;
    OscInputNodeConfig oscInputConfig = 23;
    VideoColorBalanceNodeConfig videoColorBalanceConfig = 25;
    VideoEffectNodeConfig videoEffectConfig = 26;
    VideoFileNodeConfig videoFileConfig = 27;
    VideoOutputNodeConfig videoOutputConfig = 28;
    VideoTransformNodeConfig videoTransformConfig = 29;
  }
}

message OscillatorNodeConfig {
  enum OscillatorType {
    Square = 0;
    Sine = 1;
    Saw = 2;
    Triangle = 3;
  }
  OscillatorType type = 1;
  double ratio = 2;
  double max = 3;
  double min = 4;
  double offset = 5;
  bool reverse = 6;
}

message ScriptingNodeConfig {
  string script = 1;
}

message SequenceNodeConfig {
  repeated SequenceStep steps = 1;

  message SequenceStep {
    double tick = 1;
    double value = 2;
    bool hold = 3;
  }
}

message ClockNodeConfig {
  double speed = 1;
}

message FixtureNodeConfig {
  uint32 fixture_id = 1;
}

message InputNodeConfig {}

message IldaFileNodeConfig {
  string file = 1;
}

message LaserNodeConfig {
  string device_id = 1;
}

message PixelPatternNodeConfig {
  enum Pattern {
    RgbIterate = 0;
    RgbSnake = 1;
  }

  Pattern pattern = 1;
}

message PixelDmxNodeConfig {
  uint64 width = 1;
  uint64 height = 2;
  uint32 start_universe = 3;
  string output = 4;
}

message DmxOutputNodeConfig {
  string output = 1;
  uint32 universe = 2;
  uint32 channel = 3;
}

message MidiInputNodeConfig {}
message MidiOutputNodeConfig {}

message OpcOutputNodeConfig {
  string host = 1;
  uint32 port = 2;
  uint64 width = 3;
  uint64 height = 4;
}

message OscInputNodeConfig {
  string host = 1;
  uint32 port = 2;
  string path = 3;
}

message VideoColorBalanceNodeConfig {}
message VideoEffectNodeConfig {}
message VideoFileNodeConfig {
  string file = 1;
}
message VideoOutputNodeConfig {}
message VideoTransformNodeConfig {}

message NodePosition {
  double x = 1;
  double y = 2;
}

message NodeDesigner {
  NodePosition position = 1;
  double scale = 2;
}

enum ChannelProtocol {
    Single = 0;
    Multi = 1;
    Texture = 2;
    Vector = 3;
    Laser = 4;
    Poly = 5;
    Data = 6;
    Material = 7;
    Gst = 8;
}

message Port {
  string name = 1;
  ChannelProtocol protocol = 2;
}
