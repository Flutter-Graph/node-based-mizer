// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `mappings.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct MappingResult {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MappingResult {
    fn default() -> &'a MappingResult {
        <MappingResult as ::protobuf::Message>::default_instance()
    }
}

impl MappingResult {
    pub fn new() -> MappingResult {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MappingResult {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MappingResult {
        MappingResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MappingResult>(
                "MappingResult",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MappingResult {
        static instance: ::protobuf::rt::LazyV2<MappingResult> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MappingResult::new)
    }
}

impl ::protobuf::Clear for MappingResult {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MappingResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MappingResult {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct MappingRequest {
    // message oneof groups
    pub binding: ::std::option::Option<MappingRequest_oneof_binding>,
    pub action: ::std::option::Option<MappingRequest_oneof_action>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MappingRequest {
    fn default() -> &'a MappingRequest {
        <MappingRequest as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum MappingRequest_oneof_binding {
    midi(MidiMapping),
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum MappingRequest_oneof_action {
    sequencer_go(SequencerGoAction),
    sequencer_stop(SequencerStopAction),
    layout_control(LayoutControlAction),
    programmer_highlight(ProgrammerHighlightAction),
    programmer_clear(ProgrammerClearAction),
}

impl MappingRequest {
    pub fn new() -> MappingRequest {
        ::std::default::Default::default()
    }

    // .mizer.mappings.MidiMapping midi = 1;


    pub fn get_midi(&self) -> &MidiMapping {
        match self.binding {
            ::std::option::Option::Some(MappingRequest_oneof_binding::midi(ref v)) => v,
            _ => <MidiMapping as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_midi(&mut self) {
        self.binding = ::std::option::Option::None;
    }

    pub fn has_midi(&self) -> bool {
        match self.binding {
            ::std::option::Option::Some(MappingRequest_oneof_binding::midi(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_midi(&mut self, v: MidiMapping) {
        self.binding = ::std::option::Option::Some(MappingRequest_oneof_binding::midi(v))
    }

    // Mutable pointer to the field.
    pub fn mut_midi(&mut self) -> &mut MidiMapping {
        if let ::std::option::Option::Some(MappingRequest_oneof_binding::midi(_)) = self.binding {
        } else {
            self.binding = ::std::option::Option::Some(MappingRequest_oneof_binding::midi(MidiMapping::new()));
        }
        match self.binding {
            ::std::option::Option::Some(MappingRequest_oneof_binding::midi(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_midi(&mut self) -> MidiMapping {
        if self.has_midi() {
            match self.binding.take() {
                ::std::option::Option::Some(MappingRequest_oneof_binding::midi(v)) => v,
                _ => panic!(),
            }
        } else {
            MidiMapping::new()
        }
    }

    // .mizer.mappings.SequencerGoAction sequencer_go = 10;


    pub fn get_sequencer_go(&self) -> &SequencerGoAction {
        match self.action {
            ::std::option::Option::Some(MappingRequest_oneof_action::sequencer_go(ref v)) => v,
            _ => <SequencerGoAction as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_sequencer_go(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_sequencer_go(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(MappingRequest_oneof_action::sequencer_go(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sequencer_go(&mut self, v: SequencerGoAction) {
        self.action = ::std::option::Option::Some(MappingRequest_oneof_action::sequencer_go(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sequencer_go(&mut self) -> &mut SequencerGoAction {
        if let ::std::option::Option::Some(MappingRequest_oneof_action::sequencer_go(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(MappingRequest_oneof_action::sequencer_go(SequencerGoAction::new()));
        }
        match self.action {
            ::std::option::Option::Some(MappingRequest_oneof_action::sequencer_go(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sequencer_go(&mut self) -> SequencerGoAction {
        if self.has_sequencer_go() {
            match self.action.take() {
                ::std::option::Option::Some(MappingRequest_oneof_action::sequencer_go(v)) => v,
                _ => panic!(),
            }
        } else {
            SequencerGoAction::new()
        }
    }

    // .mizer.mappings.SequencerStopAction sequencer_stop = 11;


    pub fn get_sequencer_stop(&self) -> &SequencerStopAction {
        match self.action {
            ::std::option::Option::Some(MappingRequest_oneof_action::sequencer_stop(ref v)) => v,
            _ => <SequencerStopAction as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_sequencer_stop(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_sequencer_stop(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(MappingRequest_oneof_action::sequencer_stop(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sequencer_stop(&mut self, v: SequencerStopAction) {
        self.action = ::std::option::Option::Some(MappingRequest_oneof_action::sequencer_stop(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sequencer_stop(&mut self) -> &mut SequencerStopAction {
        if let ::std::option::Option::Some(MappingRequest_oneof_action::sequencer_stop(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(MappingRequest_oneof_action::sequencer_stop(SequencerStopAction::new()));
        }
        match self.action {
            ::std::option::Option::Some(MappingRequest_oneof_action::sequencer_stop(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sequencer_stop(&mut self) -> SequencerStopAction {
        if self.has_sequencer_stop() {
            match self.action.take() {
                ::std::option::Option::Some(MappingRequest_oneof_action::sequencer_stop(v)) => v,
                _ => panic!(),
            }
        } else {
            SequencerStopAction::new()
        }
    }

    // .mizer.mappings.LayoutControlAction layout_control = 12;


    pub fn get_layout_control(&self) -> &LayoutControlAction {
        match self.action {
            ::std::option::Option::Some(MappingRequest_oneof_action::layout_control(ref v)) => v,
            _ => <LayoutControlAction as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_layout_control(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_layout_control(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(MappingRequest_oneof_action::layout_control(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_layout_control(&mut self, v: LayoutControlAction) {
        self.action = ::std::option::Option::Some(MappingRequest_oneof_action::layout_control(v))
    }

    // Mutable pointer to the field.
    pub fn mut_layout_control(&mut self) -> &mut LayoutControlAction {
        if let ::std::option::Option::Some(MappingRequest_oneof_action::layout_control(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(MappingRequest_oneof_action::layout_control(LayoutControlAction::new()));
        }
        match self.action {
            ::std::option::Option::Some(MappingRequest_oneof_action::layout_control(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_layout_control(&mut self) -> LayoutControlAction {
        if self.has_layout_control() {
            match self.action.take() {
                ::std::option::Option::Some(MappingRequest_oneof_action::layout_control(v)) => v,
                _ => panic!(),
            }
        } else {
            LayoutControlAction::new()
        }
    }

    // .mizer.mappings.ProgrammerHighlightAction programmer_highlight = 13;


    pub fn get_programmer_highlight(&self) -> &ProgrammerHighlightAction {
        match self.action {
            ::std::option::Option::Some(MappingRequest_oneof_action::programmer_highlight(ref v)) => v,
            _ => <ProgrammerHighlightAction as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_programmer_highlight(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_programmer_highlight(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(MappingRequest_oneof_action::programmer_highlight(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_programmer_highlight(&mut self, v: ProgrammerHighlightAction) {
        self.action = ::std::option::Option::Some(MappingRequest_oneof_action::programmer_highlight(v))
    }

    // Mutable pointer to the field.
    pub fn mut_programmer_highlight(&mut self) -> &mut ProgrammerHighlightAction {
        if let ::std::option::Option::Some(MappingRequest_oneof_action::programmer_highlight(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(MappingRequest_oneof_action::programmer_highlight(ProgrammerHighlightAction::new()));
        }
        match self.action {
            ::std::option::Option::Some(MappingRequest_oneof_action::programmer_highlight(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_programmer_highlight(&mut self) -> ProgrammerHighlightAction {
        if self.has_programmer_highlight() {
            match self.action.take() {
                ::std::option::Option::Some(MappingRequest_oneof_action::programmer_highlight(v)) => v,
                _ => panic!(),
            }
        } else {
            ProgrammerHighlightAction::new()
        }
    }

    // .mizer.mappings.ProgrammerClearAction programmer_clear = 14;


    pub fn get_programmer_clear(&self) -> &ProgrammerClearAction {
        match self.action {
            ::std::option::Option::Some(MappingRequest_oneof_action::programmer_clear(ref v)) => v,
            _ => <ProgrammerClearAction as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_programmer_clear(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_programmer_clear(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(MappingRequest_oneof_action::programmer_clear(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_programmer_clear(&mut self, v: ProgrammerClearAction) {
        self.action = ::std::option::Option::Some(MappingRequest_oneof_action::programmer_clear(v))
    }

    // Mutable pointer to the field.
    pub fn mut_programmer_clear(&mut self) -> &mut ProgrammerClearAction {
        if let ::std::option::Option::Some(MappingRequest_oneof_action::programmer_clear(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(MappingRequest_oneof_action::programmer_clear(ProgrammerClearAction::new()));
        }
        match self.action {
            ::std::option::Option::Some(MappingRequest_oneof_action::programmer_clear(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_programmer_clear(&mut self) -> ProgrammerClearAction {
        if self.has_programmer_clear() {
            match self.action.take() {
                ::std::option::Option::Some(MappingRequest_oneof_action::programmer_clear(v)) => v,
                _ => panic!(),
            }
        } else {
            ProgrammerClearAction::new()
        }
    }
}

impl ::protobuf::Message for MappingRequest {
    fn is_initialized(&self) -> bool {
        if let Some(MappingRequest_oneof_binding::midi(ref v)) = self.binding {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MappingRequest_oneof_action::sequencer_go(ref v)) = self.action {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MappingRequest_oneof_action::sequencer_stop(ref v)) = self.action {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MappingRequest_oneof_action::layout_control(ref v)) = self.action {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MappingRequest_oneof_action::programmer_highlight(ref v)) = self.action {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MappingRequest_oneof_action::programmer_clear(ref v)) = self.action {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.binding = ::std::option::Option::Some(MappingRequest_oneof_binding::midi(is.read_message()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.action = ::std::option::Option::Some(MappingRequest_oneof_action::sequencer_go(is.read_message()?));
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.action = ::std::option::Option::Some(MappingRequest_oneof_action::sequencer_stop(is.read_message()?));
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.action = ::std::option::Option::Some(MappingRequest_oneof_action::layout_control(is.read_message()?));
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.action = ::std::option::Option::Some(MappingRequest_oneof_action::programmer_highlight(is.read_message()?));
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.action = ::std::option::Option::Some(MappingRequest_oneof_action::programmer_clear(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.binding {
            match v {
                &MappingRequest_oneof_binding::midi(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.action {
            match v {
                &MappingRequest_oneof_action::sequencer_go(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MappingRequest_oneof_action::sequencer_stop(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MappingRequest_oneof_action::layout_control(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MappingRequest_oneof_action::programmer_highlight(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MappingRequest_oneof_action::programmer_clear(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.binding {
            match v {
                &MappingRequest_oneof_binding::midi(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.action {
            match v {
                &MappingRequest_oneof_action::sequencer_go(ref v) => {
                    os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MappingRequest_oneof_action::sequencer_stop(ref v) => {
                    os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MappingRequest_oneof_action::layout_control(ref v) => {
                    os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MappingRequest_oneof_action::programmer_highlight(ref v) => {
                    os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MappingRequest_oneof_action::programmer_clear(ref v) => {
                    os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MappingRequest {
        MappingRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, MidiMapping>(
                "midi",
                MappingRequest::has_midi,
                MappingRequest::get_midi,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SequencerGoAction>(
                "sequencer_go",
                MappingRequest::has_sequencer_go,
                MappingRequest::get_sequencer_go,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SequencerStopAction>(
                "sequencer_stop",
                MappingRequest::has_sequencer_stop,
                MappingRequest::get_sequencer_stop,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, LayoutControlAction>(
                "layout_control",
                MappingRequest::has_layout_control,
                MappingRequest::get_layout_control,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ProgrammerHighlightAction>(
                "programmer_highlight",
                MappingRequest::has_programmer_highlight,
                MappingRequest::get_programmer_highlight,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ProgrammerClearAction>(
                "programmer_clear",
                MappingRequest::has_programmer_clear,
                MappingRequest::get_programmer_clear,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MappingRequest>(
                "MappingRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MappingRequest {
        static instance: ::protobuf::rt::LazyV2<MappingRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MappingRequest::new)
    }
}

impl ::protobuf::Clear for MappingRequest {
    fn clear(&mut self) {
        self.binding = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MappingRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MappingRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct MidiMapping {
    // message fields
    pub config: ::protobuf::SingularPtrField<super::nodes::MidiNodeConfig>,
    pub input_mapping: bool,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MidiMapping {
    fn default() -> &'a MidiMapping {
        <MidiMapping as ::protobuf::Message>::default_instance()
    }
}

impl MidiMapping {
    pub fn new() -> MidiMapping {
        ::std::default::Default::default()
    }

    // .mizer.nodes.MidiNodeConfig config = 1;


    pub fn get_config(&self) -> &super::nodes::MidiNodeConfig {
        self.config.as_ref().unwrap_or_else(|| <super::nodes::MidiNodeConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_config(&mut self) {
        self.config.clear();
    }

    pub fn has_config(&self) -> bool {
        self.config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_config(&mut self, v: super::nodes::MidiNodeConfig) {
        self.config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_config(&mut self) -> &mut super::nodes::MidiNodeConfig {
        if self.config.is_none() {
            self.config.set_default();
        }
        self.config.as_mut().unwrap()
    }

    // Take field
    pub fn take_config(&mut self) -> super::nodes::MidiNodeConfig {
        self.config.take().unwrap_or_else(|| super::nodes::MidiNodeConfig::new())
    }

    // bool input_mapping = 2;


    pub fn get_input_mapping(&self) -> bool {
        self.input_mapping
    }
    pub fn clear_input_mapping(&mut self) {
        self.input_mapping = false;
    }

    // Param is passed by value, moved
    pub fn set_input_mapping(&mut self, v: bool) {
        self.input_mapping = v;
    }
}

impl ::protobuf::Message for MidiMapping {
    fn is_initialized(&self) -> bool {
        for v in &self.config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.config)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.input_mapping = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.input_mapping != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.config.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.input_mapping != false {
            os.write_bool(2, self.input_mapping)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MidiMapping {
        MidiMapping::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::nodes::MidiNodeConfig>>(
                "config",
                |m: &MidiMapping| { &m.config },
                |m: &mut MidiMapping| { &mut m.config },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "input_mapping",
                |m: &MidiMapping| { &m.input_mapping },
                |m: &mut MidiMapping| { &mut m.input_mapping },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MidiMapping>(
                "MidiMapping",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MidiMapping {
        static instance: ::protobuf::rt::LazyV2<MidiMapping> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MidiMapping::new)
    }
}

impl ::protobuf::Clear for MidiMapping {
    fn clear(&mut self) {
        self.config.clear();
        self.input_mapping = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MidiMapping {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MidiMapping {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SequencerGoAction {
    // message fields
    pub sequencer_id: u32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SequencerGoAction {
    fn default() -> &'a SequencerGoAction {
        <SequencerGoAction as ::protobuf::Message>::default_instance()
    }
}

impl SequencerGoAction {
    pub fn new() -> SequencerGoAction {
        ::std::default::Default::default()
    }

    // uint32 sequencer_id = 1;


    pub fn get_sequencer_id(&self) -> u32 {
        self.sequencer_id
    }
    pub fn clear_sequencer_id(&mut self) {
        self.sequencer_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequencer_id(&mut self, v: u32) {
        self.sequencer_id = v;
    }
}

impl ::protobuf::Message for SequencerGoAction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.sequencer_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.sequencer_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.sequencer_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.sequencer_id != 0 {
            os.write_uint32(1, self.sequencer_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SequencerGoAction {
        SequencerGoAction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "sequencer_id",
                |m: &SequencerGoAction| { &m.sequencer_id },
                |m: &mut SequencerGoAction| { &mut m.sequencer_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SequencerGoAction>(
                "SequencerGoAction",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SequencerGoAction {
        static instance: ::protobuf::rt::LazyV2<SequencerGoAction> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SequencerGoAction::new)
    }
}

impl ::protobuf::Clear for SequencerGoAction {
    fn clear(&mut self) {
        self.sequencer_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SequencerGoAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SequencerGoAction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SequencerStopAction {
    // message fields
    pub sequencer_id: u32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SequencerStopAction {
    fn default() -> &'a SequencerStopAction {
        <SequencerStopAction as ::protobuf::Message>::default_instance()
    }
}

impl SequencerStopAction {
    pub fn new() -> SequencerStopAction {
        ::std::default::Default::default()
    }

    // uint32 sequencer_id = 1;


    pub fn get_sequencer_id(&self) -> u32 {
        self.sequencer_id
    }
    pub fn clear_sequencer_id(&mut self) {
        self.sequencer_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequencer_id(&mut self, v: u32) {
        self.sequencer_id = v;
    }
}

impl ::protobuf::Message for SequencerStopAction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.sequencer_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.sequencer_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.sequencer_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.sequencer_id != 0 {
            os.write_uint32(1, self.sequencer_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SequencerStopAction {
        SequencerStopAction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "sequencer_id",
                |m: &SequencerStopAction| { &m.sequencer_id },
                |m: &mut SequencerStopAction| { &mut m.sequencer_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SequencerStopAction>(
                "SequencerStopAction",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SequencerStopAction {
        static instance: ::protobuf::rt::LazyV2<SequencerStopAction> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SequencerStopAction::new)
    }
}

impl ::protobuf::Clear for SequencerStopAction {
    fn clear(&mut self) {
        self.sequencer_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SequencerStopAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SequencerStopAction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct LayoutControlAction {
    // message fields
    pub control_node: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LayoutControlAction {
    fn default() -> &'a LayoutControlAction {
        <LayoutControlAction as ::protobuf::Message>::default_instance()
    }
}

impl LayoutControlAction {
    pub fn new() -> LayoutControlAction {
        ::std::default::Default::default()
    }

    // string control_node = 1;


    pub fn get_control_node(&self) -> &str {
        &self.control_node
    }
    pub fn clear_control_node(&mut self) {
        self.control_node.clear();
    }

    // Param is passed by value, moved
    pub fn set_control_node(&mut self, v: ::std::string::String) {
        self.control_node = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_control_node(&mut self) -> &mut ::std::string::String {
        &mut self.control_node
    }

    // Take field
    pub fn take_control_node(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.control_node, ::std::string::String::new())
    }
}

impl ::protobuf::Message for LayoutControlAction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.control_node)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.control_node.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.control_node);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.control_node.is_empty() {
            os.write_string(1, &self.control_node)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LayoutControlAction {
        LayoutControlAction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "control_node",
                |m: &LayoutControlAction| { &m.control_node },
                |m: &mut LayoutControlAction| { &mut m.control_node },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LayoutControlAction>(
                "LayoutControlAction",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LayoutControlAction {
        static instance: ::protobuf::rt::LazyV2<LayoutControlAction> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LayoutControlAction::new)
    }
}

impl ::protobuf::Clear for LayoutControlAction {
    fn clear(&mut self) {
        self.control_node.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LayoutControlAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LayoutControlAction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ProgrammerHighlightAction {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProgrammerHighlightAction {
    fn default() -> &'a ProgrammerHighlightAction {
        <ProgrammerHighlightAction as ::protobuf::Message>::default_instance()
    }
}

impl ProgrammerHighlightAction {
    pub fn new() -> ProgrammerHighlightAction {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ProgrammerHighlightAction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProgrammerHighlightAction {
        ProgrammerHighlightAction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProgrammerHighlightAction>(
                "ProgrammerHighlightAction",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProgrammerHighlightAction {
        static instance: ::protobuf::rt::LazyV2<ProgrammerHighlightAction> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProgrammerHighlightAction::new)
    }
}

impl ::protobuf::Clear for ProgrammerHighlightAction {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProgrammerHighlightAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProgrammerHighlightAction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ProgrammerClearAction {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProgrammerClearAction {
    fn default() -> &'a ProgrammerClearAction {
        <ProgrammerClearAction as ::protobuf::Message>::default_instance()
    }
}

impl ProgrammerClearAction {
    pub fn new() -> ProgrammerClearAction {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ProgrammerClearAction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProgrammerClearAction {
        ProgrammerClearAction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProgrammerClearAction>(
                "ProgrammerClearAction",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProgrammerClearAction {
        static instance: ::protobuf::rt::LazyV2<ProgrammerClearAction> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProgrammerClearAction::new)
    }
}

impl ::protobuf::Clear for ProgrammerClearAction {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProgrammerClearAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProgrammerClearAction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0emappings.proto\x12\x0emizer.mappings\x1a\x0bnodes.proto\"\x0f\n\rM\
    appingResult\"\xf0\x03\n\x0eMappingRequest\x121\n\x04midi\x18\x01\x20\
    \x01(\x0b2\x1b.mizer.mappings.MidiMappingH\0R\x04midi\x12F\n\x0csequence\
    r_go\x18\n\x20\x01(\x0b2!.mizer.mappings.SequencerGoActionH\x01R\x0bsequ\
    encerGo\x12L\n\x0esequencer_stop\x18\x0b\x20\x01(\x0b2#.mizer.mappings.S\
    equencerStopActionH\x01R\rsequencerStop\x12L\n\x0elayout_control\x18\x0c\
    \x20\x01(\x0b2#.mizer.mappings.LayoutControlActionH\x01R\rlayoutControl\
    \x12^\n\x14programmer_highlight\x18\r\x20\x01(\x0b2).mizer.mappings.Prog\
    rammerHighlightActionH\x01R\x13programmerHighlight\x12R\n\x10programmer_\
    clear\x18\x0e\x20\x01(\x0b2%.mizer.mappings.ProgrammerClearActionH\x01R\
    \x0fprogrammerClearB\t\n\x07bindingB\x08\n\x06action\"g\n\x0bMidiMapping\
    \x123\n\x06config\x18\x01\x20\x01(\x0b2\x1b.mizer.nodes.MidiNodeConfigR\
    \x06config\x12#\n\rinput_mapping\x18\x02\x20\x01(\x08R\x0cinputMapping\"\
    6\n\x11SequencerGoAction\x12!\n\x0csequencer_id\x18\x01\x20\x01(\rR\x0bs\
    equencerId\"8\n\x13SequencerStopAction\x12!\n\x0csequencer_id\x18\x01\
    \x20\x01(\rR\x0bsequencerId\"8\n\x13LayoutControlAction\x12!\n\x0ccontro\
    l_node\x18\x01\x20\x01(\tR\x0bcontrolNode\"\x1b\n\x19ProgrammerHighlight\
    Action\"\x17\n\x15ProgrammerClearAction2\\\n\x0bMappingsApi\x12M\n\nAddM\
    apping\x12\x1e.mizer.mappings.MappingRequest\x1a\x1d.mizer.mappings.Mapp\
    ingResult\"\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
