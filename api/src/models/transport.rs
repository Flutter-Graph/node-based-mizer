// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `transport.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SubscribeTransportRequest {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubscribeTransportRequest {
    fn default() -> &'a SubscribeTransportRequest {
        <SubscribeTransportRequest as ::protobuf::Message>::default_instance()
    }
}

impl SubscribeTransportRequest {
    pub fn new() -> SubscribeTransportRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for SubscribeTransportRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubscribeTransportRequest {
        SubscribeTransportRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SubscribeTransportRequest>(
                "SubscribeTransportRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SubscribeTransportRequest {
        static instance: ::protobuf::rt::LazyV2<SubscribeTransportRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SubscribeTransportRequest::new)
    }
}

impl ::protobuf::Clear for SubscribeTransportRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubscribeTransportRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscribeTransportRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Transport {
    // message fields
    pub state: TransportState,
    pub speed: f64,
    pub timecode: ::protobuf::SingularPtrField<Timecode>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Transport {
    fn default() -> &'a Transport {
        <Transport as ::protobuf::Message>::default_instance()
    }
}

impl Transport {
    pub fn new() -> Transport {
        ::std::default::Default::default()
    }

    // .mizer.TransportState state = 1;


    pub fn get_state(&self) -> TransportState {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = TransportState::Stopped;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: TransportState) {
        self.state = v;
    }

    // double speed = 2;


    pub fn get_speed(&self) -> f64 {
        self.speed
    }
    pub fn clear_speed(&mut self) {
        self.speed = 0.;
    }

    // Param is passed by value, moved
    pub fn set_speed(&mut self, v: f64) {
        self.speed = v;
    }

    // .mizer.Timecode timecode = 3;


    pub fn get_timecode(&self) -> &Timecode {
        self.timecode.as_ref().unwrap_or_else(|| <Timecode as ::protobuf::Message>::default_instance())
    }
    pub fn clear_timecode(&mut self) {
        self.timecode.clear();
    }

    pub fn has_timecode(&self) -> bool {
        self.timecode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timecode(&mut self, v: Timecode) {
        self.timecode = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timecode(&mut self) -> &mut Timecode {
        if self.timecode.is_none() {
            self.timecode.set_default();
        }
        self.timecode.as_mut().unwrap()
    }

    // Take field
    pub fn take_timecode(&mut self) -> Timecode {
        self.timecode.take().unwrap_or_else(|| Timecode::new())
    }
}

impl ::protobuf::Message for Transport {
    fn is_initialized(&self) -> bool {
        for v in &self.timecode {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.speed = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.timecode)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != TransportState::Stopped {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        if self.speed != 0. {
            my_size += 9;
        }
        if let Some(ref v) = self.timecode.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != TransportState::Stopped {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.state))?;
        }
        if self.speed != 0. {
            os.write_double(2, self.speed)?;
        }
        if let Some(ref v) = self.timecode.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Transport {
        Transport::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TransportState>>(
                "state",
                |m: &Transport| { &m.state },
                |m: &mut Transport| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "speed",
                |m: &Transport| { &m.speed },
                |m: &mut Transport| { &mut m.speed },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Timecode>>(
                "timecode",
                |m: &Transport| { &m.timecode },
                |m: &mut Transport| { &mut m.timecode },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Transport>(
                "Transport",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Transport {
        static instance: ::protobuf::rt::LazyV2<Transport> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Transport::new)
    }
}

impl ::protobuf::Clear for Transport {
    fn clear(&mut self) {
        self.state = TransportState::Stopped;
        self.speed = 0.;
        self.timecode.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Transport {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Transport {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Timecode {
    // message fields
    pub frames: u64,
    pub seconds: u64,
    pub minutes: u64,
    pub hours: u64,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Timecode {
    fn default() -> &'a Timecode {
        <Timecode as ::protobuf::Message>::default_instance()
    }
}

impl Timecode {
    pub fn new() -> Timecode {
        ::std::default::Default::default()
    }

    // uint64 frames = 1;


    pub fn get_frames(&self) -> u64 {
        self.frames
    }
    pub fn clear_frames(&mut self) {
        self.frames = 0;
    }

    // Param is passed by value, moved
    pub fn set_frames(&mut self, v: u64) {
        self.frames = v;
    }

    // uint64 seconds = 2;


    pub fn get_seconds(&self) -> u64 {
        self.seconds
    }
    pub fn clear_seconds(&mut self) {
        self.seconds = 0;
    }

    // Param is passed by value, moved
    pub fn set_seconds(&mut self, v: u64) {
        self.seconds = v;
    }

    // uint64 minutes = 3;


    pub fn get_minutes(&self) -> u64 {
        self.minutes
    }
    pub fn clear_minutes(&mut self) {
        self.minutes = 0;
    }

    // Param is passed by value, moved
    pub fn set_minutes(&mut self, v: u64) {
        self.minutes = v;
    }

    // uint64 hours = 4;


    pub fn get_hours(&self) -> u64 {
        self.hours
    }
    pub fn clear_hours(&mut self) {
        self.hours = 0;
    }

    // Param is passed by value, moved
    pub fn set_hours(&mut self, v: u64) {
        self.hours = v;
    }
}

impl ::protobuf::Message for Timecode {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.frames = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.seconds = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.minutes = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.hours = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.frames != 0 {
            my_size += ::protobuf::rt::value_size(1, self.frames, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.seconds != 0 {
            my_size += ::protobuf::rt::value_size(2, self.seconds, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.minutes != 0 {
            my_size += ::protobuf::rt::value_size(3, self.minutes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.hours != 0 {
            my_size += ::protobuf::rt::value_size(4, self.hours, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.frames != 0 {
            os.write_uint64(1, self.frames)?;
        }
        if self.seconds != 0 {
            os.write_uint64(2, self.seconds)?;
        }
        if self.minutes != 0 {
            os.write_uint64(3, self.minutes)?;
        }
        if self.hours != 0 {
            os.write_uint64(4, self.hours)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Timecode {
        Timecode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "frames",
                |m: &Timecode| { &m.frames },
                |m: &mut Timecode| { &mut m.frames },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "seconds",
                |m: &Timecode| { &m.seconds },
                |m: &mut Timecode| { &mut m.seconds },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "minutes",
                |m: &Timecode| { &m.minutes },
                |m: &mut Timecode| { &mut m.minutes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "hours",
                |m: &Timecode| { &m.hours },
                |m: &mut Timecode| { &mut m.hours },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Timecode>(
                "Timecode",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Timecode {
        static instance: ::protobuf::rt::LazyV2<Timecode> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Timecode::new)
    }
}

impl ::protobuf::Clear for Timecode {
    fn clear(&mut self) {
        self.frames = 0;
        self.seconds = 0;
        self.minutes = 0;
        self.hours = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Timecode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Timecode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SetTransportRequest {
    // message fields
    pub state: TransportState,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetTransportRequest {
    fn default() -> &'a SetTransportRequest {
        <SetTransportRequest as ::protobuf::Message>::default_instance()
    }
}

impl SetTransportRequest {
    pub fn new() -> SetTransportRequest {
        ::std::default::Default::default()
    }

    // .mizer.TransportState state = 1;


    pub fn get_state(&self) -> TransportState {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = TransportState::Stopped;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: TransportState) {
        self.state = v;
    }
}

impl ::protobuf::Message for SetTransportRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != TransportState::Stopped {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != TransportState::Stopped {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.state))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetTransportRequest {
        SetTransportRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TransportState>>(
                "state",
                |m: &SetTransportRequest| { &m.state },
                |m: &mut SetTransportRequest| { &mut m.state },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SetTransportRequest>(
                "SetTransportRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SetTransportRequest {
        static instance: ::protobuf::rt::LazyV2<SetTransportRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetTransportRequest::new)
    }
}

impl ::protobuf::Clear for SetTransportRequest {
    fn clear(&mut self) {
        self.state = TransportState::Stopped;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetTransportRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetTransportRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SetBpmRequest {
    // message fields
    pub bpm: f64,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetBpmRequest {
    fn default() -> &'a SetBpmRequest {
        <SetBpmRequest as ::protobuf::Message>::default_instance()
    }
}

impl SetBpmRequest {
    pub fn new() -> SetBpmRequest {
        ::std::default::Default::default()
    }

    // double bpm = 1;


    pub fn get_bpm(&self) -> f64 {
        self.bpm
    }
    pub fn clear_bpm(&mut self) {
        self.bpm = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bpm(&mut self, v: f64) {
        self.bpm = v;
    }
}

impl ::protobuf::Message for SetBpmRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.bpm = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.bpm != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.bpm != 0. {
            os.write_double(1, self.bpm)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetBpmRequest {
        SetBpmRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "bpm",
                |m: &SetBpmRequest| { &m.bpm },
                |m: &mut SetBpmRequest| { &mut m.bpm },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SetBpmRequest>(
                "SetBpmRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SetBpmRequest {
        static instance: ::protobuf::rt::LazyV2<SetBpmRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetBpmRequest::new)
    }
}

impl ::protobuf::Clear for SetBpmRequest {
    fn clear(&mut self) {
        self.bpm = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetBpmRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetBpmRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum TransportState {
    Stopped = 0,
    Paused = 1,
    Playing = 2,
}

impl ::protobuf::ProtobufEnum for TransportState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TransportState> {
        match value {
            0 => ::std::option::Option::Some(TransportState::Stopped),
            1 => ::std::option::Option::Some(TransportState::Paused),
            2 => ::std::option::Option::Some(TransportState::Playing),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TransportState] = &[
            TransportState::Stopped,
            TransportState::Paused,
            TransportState::Playing,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<TransportState>("TransportState", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for TransportState {
}

impl ::std::default::Default for TransportState {
    fn default() -> Self {
        TransportState::Stopped
    }
}

impl ::protobuf::reflect::ProtobufValue for TransportState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ftransport.proto\x12\x05mizer\"\x1b\n\x19SubscribeTransportRequest\
    \"{\n\tTransport\x12+\n\x05state\x18\x01\x20\x01(\x0e2\x15.mizer.Transpo\
    rtStateR\x05state\x12\x14\n\x05speed\x18\x02\x20\x01(\x01R\x05speed\x12+\
    \n\x08timecode\x18\x03\x20\x01(\x0b2\x0f.mizer.TimecodeR\x08timecode\"l\
    \n\x08Timecode\x12\x16\n\x06frames\x18\x01\x20\x01(\x04R\x06frames\x12\
    \x18\n\x07seconds\x18\x02\x20\x01(\x04R\x07seconds\x12\x18\n\x07minutes\
    \x18\x03\x20\x01(\x04R\x07minutes\x12\x14\n\x05hours\x18\x04\x20\x01(\
    \x04R\x05hours\"B\n\x13SetTransportRequest\x12+\n\x05state\x18\x01\x20\
    \x01(\x0e2\x15.mizer.TransportStateR\x05state\"!\n\rSetBpmRequest\x12\
    \x10\n\x03bpm\x18\x01\x20\x01(\x01R\x03bpm*6\n\x0eTransportState\x12\x0b\
    \n\x07Stopped\x10\0\x12\n\n\x06Paused\x10\x01\x12\x0b\n\x07Playing\x10\
    \x022\xcc\x01\n\x0cTransportApi\x12L\n\x12SubscribeTransport\x12\x20.miz\
    er.SubscribeTransportRequest\x1a\x10.mizer.Transport\"\00\x01\x12:\n\x08\
    SetState\x12\x1a.mizer.SetTransportRequest\x1a\x10.mizer.Transport\"\0\
    \x122\n\x06SetBpm\x12\x14.mizer.SetBpmRequest\x1a\x10.mizer.Transport\"\
    \0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
