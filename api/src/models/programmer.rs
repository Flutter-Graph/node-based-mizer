// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `programmer.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SubscribeProgrammerRequest {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubscribeProgrammerRequest {
    fn default() -> &'a SubscribeProgrammerRequest {
        <SubscribeProgrammerRequest as ::protobuf::Message>::default_instance()
    }
}

impl SubscribeProgrammerRequest {
    pub fn new() -> SubscribeProgrammerRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for SubscribeProgrammerRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubscribeProgrammerRequest {
        SubscribeProgrammerRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SubscribeProgrammerRequest>(
                "SubscribeProgrammerRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SubscribeProgrammerRequest {
        static instance: ::protobuf::rt::LazyV2<SubscribeProgrammerRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SubscribeProgrammerRequest::new)
    }
}

impl ::protobuf::Clear for SubscribeProgrammerRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubscribeProgrammerRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscribeProgrammerRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ProgrammerState {
    // message fields
    pub fixtures: ::protobuf::RepeatedField<super::fixtures::FixtureId>,
    pub active_fixtures: ::protobuf::RepeatedField<super::fixtures::FixtureId>,
    pub controls: ::protobuf::RepeatedField<ProgrammerChannel>,
    pub highlight: bool,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProgrammerState {
    fn default() -> &'a ProgrammerState {
        <ProgrammerState as ::protobuf::Message>::default_instance()
    }
}

impl ProgrammerState {
    pub fn new() -> ProgrammerState {
        ::std::default::Default::default()
    }

    // repeated .mizer.fixtures.FixtureId fixtures = 1;


    pub fn get_fixtures(&self) -> &[super::fixtures::FixtureId] {
        &self.fixtures
    }
    pub fn clear_fixtures(&mut self) {
        self.fixtures.clear();
    }

    // Param is passed by value, moved
    pub fn set_fixtures(&mut self, v: ::protobuf::RepeatedField<super::fixtures::FixtureId>) {
        self.fixtures = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fixtures(&mut self) -> &mut ::protobuf::RepeatedField<super::fixtures::FixtureId> {
        &mut self.fixtures
    }

    // Take field
    pub fn take_fixtures(&mut self) -> ::protobuf::RepeatedField<super::fixtures::FixtureId> {
        ::std::mem::replace(&mut self.fixtures, ::protobuf::RepeatedField::new())
    }

    // repeated .mizer.fixtures.FixtureId active_fixtures = 2;


    pub fn get_active_fixtures(&self) -> &[super::fixtures::FixtureId] {
        &self.active_fixtures
    }
    pub fn clear_active_fixtures(&mut self) {
        self.active_fixtures.clear();
    }

    // Param is passed by value, moved
    pub fn set_active_fixtures(&mut self, v: ::protobuf::RepeatedField<super::fixtures::FixtureId>) {
        self.active_fixtures = v;
    }

    // Mutable pointer to the field.
    pub fn mut_active_fixtures(&mut self) -> &mut ::protobuf::RepeatedField<super::fixtures::FixtureId> {
        &mut self.active_fixtures
    }

    // Take field
    pub fn take_active_fixtures(&mut self) -> ::protobuf::RepeatedField<super::fixtures::FixtureId> {
        ::std::mem::replace(&mut self.active_fixtures, ::protobuf::RepeatedField::new())
    }

    // repeated .mizer.programmer.ProgrammerChannel controls = 3;


    pub fn get_controls(&self) -> &[ProgrammerChannel] {
        &self.controls
    }
    pub fn clear_controls(&mut self) {
        self.controls.clear();
    }

    // Param is passed by value, moved
    pub fn set_controls(&mut self, v: ::protobuf::RepeatedField<ProgrammerChannel>) {
        self.controls = v;
    }

    // Mutable pointer to the field.
    pub fn mut_controls(&mut self) -> &mut ::protobuf::RepeatedField<ProgrammerChannel> {
        &mut self.controls
    }

    // Take field
    pub fn take_controls(&mut self) -> ::protobuf::RepeatedField<ProgrammerChannel> {
        ::std::mem::replace(&mut self.controls, ::protobuf::RepeatedField::new())
    }

    // bool highlight = 4;


    pub fn get_highlight(&self) -> bool {
        self.highlight
    }
    pub fn clear_highlight(&mut self) {
        self.highlight = false;
    }

    // Param is passed by value, moved
    pub fn set_highlight(&mut self, v: bool) {
        self.highlight = v;
    }
}

impl ::protobuf::Message for ProgrammerState {
    fn is_initialized(&self) -> bool {
        for v in &self.fixtures {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.active_fixtures {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.controls {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.fixtures)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.active_fixtures)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.controls)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.highlight = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.fixtures {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.active_fixtures {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.controls {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.highlight != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.fixtures {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.active_fixtures {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.controls {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.highlight != false {
            os.write_bool(4, self.highlight)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProgrammerState {
        ProgrammerState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::fixtures::FixtureId>>(
                "fixtures",
                |m: &ProgrammerState| { &m.fixtures },
                |m: &mut ProgrammerState| { &mut m.fixtures },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::fixtures::FixtureId>>(
                "active_fixtures",
                |m: &ProgrammerState| { &m.active_fixtures },
                |m: &mut ProgrammerState| { &mut m.active_fixtures },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ProgrammerChannel>>(
                "controls",
                |m: &ProgrammerState| { &m.controls },
                |m: &mut ProgrammerState| { &mut m.controls },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "highlight",
                |m: &ProgrammerState| { &m.highlight },
                |m: &mut ProgrammerState| { &mut m.highlight },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProgrammerState>(
                "ProgrammerState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProgrammerState {
        static instance: ::protobuf::rt::LazyV2<ProgrammerState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProgrammerState::new)
    }
}

impl ::protobuf::Clear for ProgrammerState {
    fn clear(&mut self) {
        self.fixtures.clear();
        self.active_fixtures.clear();
        self.controls.clear();
        self.highlight = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProgrammerState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProgrammerState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ProgrammerChannel {
    // message fields
    pub fixtures: ::protobuf::RepeatedField<super::fixtures::FixtureId>,
    pub control: super::fixtures::FixtureControl,
    // message oneof groups
    pub value: ::std::option::Option<ProgrammerChannel_oneof_value>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProgrammerChannel {
    fn default() -> &'a ProgrammerChannel {
        <ProgrammerChannel as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum ProgrammerChannel_oneof_value {
    fader(f64),
    color(super::fixtures::ColorMixerChannel),
    generic(ProgrammerChannel_GenericValue),
}

impl ProgrammerChannel {
    pub fn new() -> ProgrammerChannel {
        ::std::default::Default::default()
    }

    // repeated .mizer.fixtures.FixtureId fixtures = 1;


    pub fn get_fixtures(&self) -> &[super::fixtures::FixtureId] {
        &self.fixtures
    }
    pub fn clear_fixtures(&mut self) {
        self.fixtures.clear();
    }

    // Param is passed by value, moved
    pub fn set_fixtures(&mut self, v: ::protobuf::RepeatedField<super::fixtures::FixtureId>) {
        self.fixtures = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fixtures(&mut self) -> &mut ::protobuf::RepeatedField<super::fixtures::FixtureId> {
        &mut self.fixtures
    }

    // Take field
    pub fn take_fixtures(&mut self) -> ::protobuf::RepeatedField<super::fixtures::FixtureId> {
        ::std::mem::replace(&mut self.fixtures, ::protobuf::RepeatedField::new())
    }

    // .mizer.fixtures.FixtureControl control = 2;


    pub fn get_control(&self) -> super::fixtures::FixtureControl {
        self.control
    }
    pub fn clear_control(&mut self) {
        self.control = super::fixtures::FixtureControl::INTENSITY;
    }

    // Param is passed by value, moved
    pub fn set_control(&mut self, v: super::fixtures::FixtureControl) {
        self.control = v;
    }

    // double fader = 3;


    pub fn get_fader(&self) -> f64 {
        match self.value {
            ::std::option::Option::Some(ProgrammerChannel_oneof_value::fader(v)) => v,
            _ => 0.,
        }
    }
    pub fn clear_fader(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_fader(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(ProgrammerChannel_oneof_value::fader(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fader(&mut self, v: f64) {
        self.value = ::std::option::Option::Some(ProgrammerChannel_oneof_value::fader(v))
    }

    // .mizer.fixtures.ColorMixerChannel color = 4;


    pub fn get_color(&self) -> &super::fixtures::ColorMixerChannel {
        match self.value {
            ::std::option::Option::Some(ProgrammerChannel_oneof_value::color(ref v)) => v,
            _ => <super::fixtures::ColorMixerChannel as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_color(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_color(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(ProgrammerChannel_oneof_value::color(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_color(&mut self, v: super::fixtures::ColorMixerChannel) {
        self.value = ::std::option::Option::Some(ProgrammerChannel_oneof_value::color(v))
    }

    // Mutable pointer to the field.
    pub fn mut_color(&mut self) -> &mut super::fixtures::ColorMixerChannel {
        if let ::std::option::Option::Some(ProgrammerChannel_oneof_value::color(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(ProgrammerChannel_oneof_value::color(super::fixtures::ColorMixerChannel::new()));
        }
        match self.value {
            ::std::option::Option::Some(ProgrammerChannel_oneof_value::color(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_color(&mut self) -> super::fixtures::ColorMixerChannel {
        if self.has_color() {
            match self.value.take() {
                ::std::option::Option::Some(ProgrammerChannel_oneof_value::color(v)) => v,
                _ => panic!(),
            }
        } else {
            super::fixtures::ColorMixerChannel::new()
        }
    }

    // .mizer.programmer.ProgrammerChannel.GenericValue generic = 5;


    pub fn get_generic(&self) -> &ProgrammerChannel_GenericValue {
        match self.value {
            ::std::option::Option::Some(ProgrammerChannel_oneof_value::generic(ref v)) => v,
            _ => <ProgrammerChannel_GenericValue as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_generic(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_generic(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(ProgrammerChannel_oneof_value::generic(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_generic(&mut self, v: ProgrammerChannel_GenericValue) {
        self.value = ::std::option::Option::Some(ProgrammerChannel_oneof_value::generic(v))
    }

    // Mutable pointer to the field.
    pub fn mut_generic(&mut self) -> &mut ProgrammerChannel_GenericValue {
        if let ::std::option::Option::Some(ProgrammerChannel_oneof_value::generic(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(ProgrammerChannel_oneof_value::generic(ProgrammerChannel_GenericValue::new()));
        }
        match self.value {
            ::std::option::Option::Some(ProgrammerChannel_oneof_value::generic(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_generic(&mut self) -> ProgrammerChannel_GenericValue {
        if self.has_generic() {
            match self.value.take() {
                ::std::option::Option::Some(ProgrammerChannel_oneof_value::generic(v)) => v,
                _ => panic!(),
            }
        } else {
            ProgrammerChannel_GenericValue::new()
        }
    }
}

impl ::protobuf::Message for ProgrammerChannel {
    fn is_initialized(&self) -> bool {
        for v in &self.fixtures {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(ProgrammerChannel_oneof_value::color(ref v)) = self.value {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ProgrammerChannel_oneof_value::generic(ref v)) = self.value {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.fixtures)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.control, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(ProgrammerChannel_oneof_value::fader(is.read_double()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(ProgrammerChannel_oneof_value::color(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(ProgrammerChannel_oneof_value::generic(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.fixtures {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.control != super::fixtures::FixtureControl::INTENSITY {
            my_size += ::protobuf::rt::enum_size(2, self.control);
        }
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &ProgrammerChannel_oneof_value::fader(v) => {
                    my_size += 9;
                },
                &ProgrammerChannel_oneof_value::color(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ProgrammerChannel_oneof_value::generic(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.fixtures {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.control != super::fixtures::FixtureControl::INTENSITY {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.control))?;
        }
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &ProgrammerChannel_oneof_value::fader(v) => {
                    os.write_double(3, v)?;
                },
                &ProgrammerChannel_oneof_value::color(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ProgrammerChannel_oneof_value::generic(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProgrammerChannel {
        ProgrammerChannel::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::fixtures::FixtureId>>(
                "fixtures",
                |m: &ProgrammerChannel| { &m.fixtures },
                |m: &mut ProgrammerChannel| { &mut m.fixtures },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::fixtures::FixtureControl>>(
                "control",
                |m: &ProgrammerChannel| { &m.control },
                |m: &mut ProgrammerChannel| { &mut m.control },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor::<_>(
                "fader",
                ProgrammerChannel::has_fader,
                ProgrammerChannel::get_fader,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::fixtures::ColorMixerChannel>(
                "color",
                ProgrammerChannel::has_color,
                ProgrammerChannel::get_color,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ProgrammerChannel_GenericValue>(
                "generic",
                ProgrammerChannel::has_generic,
                ProgrammerChannel::get_generic,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProgrammerChannel>(
                "ProgrammerChannel",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProgrammerChannel {
        static instance: ::protobuf::rt::LazyV2<ProgrammerChannel> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProgrammerChannel::new)
    }
}

impl ::protobuf::Clear for ProgrammerChannel {
    fn clear(&mut self) {
        self.fixtures.clear();
        self.control = super::fixtures::FixtureControl::INTENSITY;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProgrammerChannel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProgrammerChannel {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ProgrammerChannel_GenericValue {
    // message fields
    pub name: ::std::string::String,
    pub value: f64,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProgrammerChannel_GenericValue {
    fn default() -> &'a ProgrammerChannel_GenericValue {
        <ProgrammerChannel_GenericValue as ::protobuf::Message>::default_instance()
    }
}

impl ProgrammerChannel_GenericValue {
    pub fn new() -> ProgrammerChannel_GenericValue {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // double value = 2;


    pub fn get_value(&self) -> f64 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: f64) {
        self.value = v;
    }
}

impl ::protobuf::Message for ProgrammerChannel_GenericValue {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.value = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.value != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.value != 0. {
            os.write_double(2, self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProgrammerChannel_GenericValue {
        ProgrammerChannel_GenericValue::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ProgrammerChannel_GenericValue| { &m.name },
                |m: &mut ProgrammerChannel_GenericValue| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "value",
                |m: &ProgrammerChannel_GenericValue| { &m.value },
                |m: &mut ProgrammerChannel_GenericValue| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProgrammerChannel_GenericValue>(
                "ProgrammerChannel.GenericValue",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProgrammerChannel_GenericValue {
        static instance: ::protobuf::rt::LazyV2<ProgrammerChannel_GenericValue> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProgrammerChannel_GenericValue::new)
    }
}

impl ::protobuf::Clear for ProgrammerChannel_GenericValue {
    fn clear(&mut self) {
        self.name.clear();
        self.value = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProgrammerChannel_GenericValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProgrammerChannel_GenericValue {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum ProgrammerChannel_ColorChannel {
    Red = 0,
    Green = 1,
    Blue = 2,
}

impl ::protobuf::ProtobufEnum for ProgrammerChannel_ColorChannel {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ProgrammerChannel_ColorChannel> {
        match value {
            0 => ::std::option::Option::Some(ProgrammerChannel_ColorChannel::Red),
            1 => ::std::option::Option::Some(ProgrammerChannel_ColorChannel::Green),
            2 => ::std::option::Option::Some(ProgrammerChannel_ColorChannel::Blue),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ProgrammerChannel_ColorChannel] = &[
            ProgrammerChannel_ColorChannel::Red,
            ProgrammerChannel_ColorChannel::Green,
            ProgrammerChannel_ColorChannel::Blue,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ProgrammerChannel_ColorChannel>("ProgrammerChannel.ColorChannel", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ProgrammerChannel_ColorChannel {
}

impl ::std::default::Default for ProgrammerChannel_ColorChannel {
    fn default() -> Self {
        ProgrammerChannel_ColorChannel::Red
    }
}

impl ::protobuf::reflect::ProtobufValue for ProgrammerChannel_ColorChannel {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct WriteControlRequest {
    // message fields
    pub control: super::fixtures::FixtureControl,
    // message oneof groups
    pub value: ::std::option::Option<WriteControlRequest_oneof_value>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteControlRequest {
    fn default() -> &'a WriteControlRequest {
        <WriteControlRequest as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum WriteControlRequest_oneof_value {
    fader(f64),
    color(super::fixtures::ColorMixerChannel),
    generic(WriteControlRequest_GenericValue),
}

impl WriteControlRequest {
    pub fn new() -> WriteControlRequest {
        ::std::default::Default::default()
    }

    // .mizer.fixtures.FixtureControl control = 1;


    pub fn get_control(&self) -> super::fixtures::FixtureControl {
        self.control
    }
    pub fn clear_control(&mut self) {
        self.control = super::fixtures::FixtureControl::INTENSITY;
    }

    // Param is passed by value, moved
    pub fn set_control(&mut self, v: super::fixtures::FixtureControl) {
        self.control = v;
    }

    // double fader = 2;


    pub fn get_fader(&self) -> f64 {
        match self.value {
            ::std::option::Option::Some(WriteControlRequest_oneof_value::fader(v)) => v,
            _ => 0.,
        }
    }
    pub fn clear_fader(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_fader(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(WriteControlRequest_oneof_value::fader(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fader(&mut self, v: f64) {
        self.value = ::std::option::Option::Some(WriteControlRequest_oneof_value::fader(v))
    }

    // .mizer.fixtures.ColorMixerChannel color = 3;


    pub fn get_color(&self) -> &super::fixtures::ColorMixerChannel {
        match self.value {
            ::std::option::Option::Some(WriteControlRequest_oneof_value::color(ref v)) => v,
            _ => <super::fixtures::ColorMixerChannel as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_color(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_color(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(WriteControlRequest_oneof_value::color(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_color(&mut self, v: super::fixtures::ColorMixerChannel) {
        self.value = ::std::option::Option::Some(WriteControlRequest_oneof_value::color(v))
    }

    // Mutable pointer to the field.
    pub fn mut_color(&mut self) -> &mut super::fixtures::ColorMixerChannel {
        if let ::std::option::Option::Some(WriteControlRequest_oneof_value::color(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(WriteControlRequest_oneof_value::color(super::fixtures::ColorMixerChannel::new()));
        }
        match self.value {
            ::std::option::Option::Some(WriteControlRequest_oneof_value::color(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_color(&mut self) -> super::fixtures::ColorMixerChannel {
        if self.has_color() {
            match self.value.take() {
                ::std::option::Option::Some(WriteControlRequest_oneof_value::color(v)) => v,
                _ => panic!(),
            }
        } else {
            super::fixtures::ColorMixerChannel::new()
        }
    }

    // .mizer.programmer.WriteControlRequest.GenericValue generic = 4;


    pub fn get_generic(&self) -> &WriteControlRequest_GenericValue {
        match self.value {
            ::std::option::Option::Some(WriteControlRequest_oneof_value::generic(ref v)) => v,
            _ => <WriteControlRequest_GenericValue as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_generic(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_generic(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(WriteControlRequest_oneof_value::generic(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_generic(&mut self, v: WriteControlRequest_GenericValue) {
        self.value = ::std::option::Option::Some(WriteControlRequest_oneof_value::generic(v))
    }

    // Mutable pointer to the field.
    pub fn mut_generic(&mut self) -> &mut WriteControlRequest_GenericValue {
        if let ::std::option::Option::Some(WriteControlRequest_oneof_value::generic(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(WriteControlRequest_oneof_value::generic(WriteControlRequest_GenericValue::new()));
        }
        match self.value {
            ::std::option::Option::Some(WriteControlRequest_oneof_value::generic(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_generic(&mut self) -> WriteControlRequest_GenericValue {
        if self.has_generic() {
            match self.value.take() {
                ::std::option::Option::Some(WriteControlRequest_oneof_value::generic(v)) => v,
                _ => panic!(),
            }
        } else {
            WriteControlRequest_GenericValue::new()
        }
    }
}

impl ::protobuf::Message for WriteControlRequest {
    fn is_initialized(&self) -> bool {
        if let Some(WriteControlRequest_oneof_value::color(ref v)) = self.value {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(WriteControlRequest_oneof_value::generic(ref v)) = self.value {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.control, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(WriteControlRequest_oneof_value::fader(is.read_double()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(WriteControlRequest_oneof_value::color(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(WriteControlRequest_oneof_value::generic(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.control != super::fixtures::FixtureControl::INTENSITY {
            my_size += ::protobuf::rt::enum_size(1, self.control);
        }
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &WriteControlRequest_oneof_value::fader(v) => {
                    my_size += 9;
                },
                &WriteControlRequest_oneof_value::color(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &WriteControlRequest_oneof_value::generic(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.control != super::fixtures::FixtureControl::INTENSITY {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.control))?;
        }
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &WriteControlRequest_oneof_value::fader(v) => {
                    os.write_double(2, v)?;
                },
                &WriteControlRequest_oneof_value::color(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &WriteControlRequest_oneof_value::generic(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteControlRequest {
        WriteControlRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::fixtures::FixtureControl>>(
                "control",
                |m: &WriteControlRequest| { &m.control },
                |m: &mut WriteControlRequest| { &mut m.control },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor::<_>(
                "fader",
                WriteControlRequest::has_fader,
                WriteControlRequest::get_fader,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::fixtures::ColorMixerChannel>(
                "color",
                WriteControlRequest::has_color,
                WriteControlRequest::get_color,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, WriteControlRequest_GenericValue>(
                "generic",
                WriteControlRequest::has_generic,
                WriteControlRequest::get_generic,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WriteControlRequest>(
                "WriteControlRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WriteControlRequest {
        static instance: ::protobuf::rt::LazyV2<WriteControlRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WriteControlRequest::new)
    }
}

impl ::protobuf::Clear for WriteControlRequest {
    fn clear(&mut self) {
        self.control = super::fixtures::FixtureControl::INTENSITY;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteControlRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteControlRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct WriteControlRequest_GenericValue {
    // message fields
    pub name: ::std::string::String,
    pub value: f64,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteControlRequest_GenericValue {
    fn default() -> &'a WriteControlRequest_GenericValue {
        <WriteControlRequest_GenericValue as ::protobuf::Message>::default_instance()
    }
}

impl WriteControlRequest_GenericValue {
    pub fn new() -> WriteControlRequest_GenericValue {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // double value = 2;


    pub fn get_value(&self) -> f64 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: f64) {
        self.value = v;
    }
}

impl ::protobuf::Message for WriteControlRequest_GenericValue {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.value = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.value != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.value != 0. {
            os.write_double(2, self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteControlRequest_GenericValue {
        WriteControlRequest_GenericValue::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &WriteControlRequest_GenericValue| { &m.name },
                |m: &mut WriteControlRequest_GenericValue| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "value",
                |m: &WriteControlRequest_GenericValue| { &m.value },
                |m: &mut WriteControlRequest_GenericValue| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WriteControlRequest_GenericValue>(
                "WriteControlRequest.GenericValue",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WriteControlRequest_GenericValue {
        static instance: ::protobuf::rt::LazyV2<WriteControlRequest_GenericValue> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WriteControlRequest_GenericValue::new)
    }
}

impl ::protobuf::Clear for WriteControlRequest_GenericValue {
    fn clear(&mut self) {
        self.name.clear();
        self.value = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteControlRequest_GenericValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteControlRequest_GenericValue {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct WriteControlResponse {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteControlResponse {
    fn default() -> &'a WriteControlResponse {
        <WriteControlResponse as ::protobuf::Message>::default_instance()
    }
}

impl WriteControlResponse {
    pub fn new() -> WriteControlResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for WriteControlResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteControlResponse {
        WriteControlResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WriteControlResponse>(
                "WriteControlResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WriteControlResponse {
        static instance: ::protobuf::rt::LazyV2<WriteControlResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WriteControlResponse::new)
    }
}

impl ::protobuf::Clear for WriteControlResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteControlResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteControlResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SelectFixturesRequest {
    // message fields
    pub fixtures: ::protobuf::RepeatedField<super::fixtures::FixtureId>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SelectFixturesRequest {
    fn default() -> &'a SelectFixturesRequest {
        <SelectFixturesRequest as ::protobuf::Message>::default_instance()
    }
}

impl SelectFixturesRequest {
    pub fn new() -> SelectFixturesRequest {
        ::std::default::Default::default()
    }

    // repeated .mizer.fixtures.FixtureId fixtures = 1;


    pub fn get_fixtures(&self) -> &[super::fixtures::FixtureId] {
        &self.fixtures
    }
    pub fn clear_fixtures(&mut self) {
        self.fixtures.clear();
    }

    // Param is passed by value, moved
    pub fn set_fixtures(&mut self, v: ::protobuf::RepeatedField<super::fixtures::FixtureId>) {
        self.fixtures = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fixtures(&mut self) -> &mut ::protobuf::RepeatedField<super::fixtures::FixtureId> {
        &mut self.fixtures
    }

    // Take field
    pub fn take_fixtures(&mut self) -> ::protobuf::RepeatedField<super::fixtures::FixtureId> {
        ::std::mem::replace(&mut self.fixtures, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SelectFixturesRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.fixtures {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.fixtures)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.fixtures {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.fixtures {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SelectFixturesRequest {
        SelectFixturesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::fixtures::FixtureId>>(
                "fixtures",
                |m: &SelectFixturesRequest| { &m.fixtures },
                |m: &mut SelectFixturesRequest| { &mut m.fixtures },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SelectFixturesRequest>(
                "SelectFixturesRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SelectFixturesRequest {
        static instance: ::protobuf::rt::LazyV2<SelectFixturesRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SelectFixturesRequest::new)
    }
}

impl ::protobuf::Clear for SelectFixturesRequest {
    fn clear(&mut self) {
        self.fixtures.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SelectFixturesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SelectFixturesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SelectFixturesResponse {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SelectFixturesResponse {
    fn default() -> &'a SelectFixturesResponse {
        <SelectFixturesResponse as ::protobuf::Message>::default_instance()
    }
}

impl SelectFixturesResponse {
    pub fn new() -> SelectFixturesResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for SelectFixturesResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SelectFixturesResponse {
        SelectFixturesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SelectFixturesResponse>(
                "SelectFixturesResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SelectFixturesResponse {
        static instance: ::protobuf::rt::LazyV2<SelectFixturesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SelectFixturesResponse::new)
    }
}

impl ::protobuf::Clear for SelectFixturesResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SelectFixturesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SelectFixturesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ClearRequest {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClearRequest {
    fn default() -> &'a ClearRequest {
        <ClearRequest as ::protobuf::Message>::default_instance()
    }
}

impl ClearRequest {
    pub fn new() -> ClearRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ClearRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClearRequest {
        ClearRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClearRequest>(
                "ClearRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClearRequest {
        static instance: ::protobuf::rt::LazyV2<ClearRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClearRequest::new)
    }
}

impl ::protobuf::Clear for ClearRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClearRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClearRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ClearResponse {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClearResponse {
    fn default() -> &'a ClearResponse {
        <ClearResponse as ::protobuf::Message>::default_instance()
    }
}

impl ClearResponse {
    pub fn new() -> ClearResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ClearResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClearResponse {
        ClearResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClearResponse>(
                "ClearResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClearResponse {
        static instance: ::protobuf::rt::LazyV2<ClearResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClearResponse::new)
    }
}

impl ::protobuf::Clear for ClearResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClearResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClearResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct HighlightRequest {
    // message fields
    pub highlight: bool,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HighlightRequest {
    fn default() -> &'a HighlightRequest {
        <HighlightRequest as ::protobuf::Message>::default_instance()
    }
}

impl HighlightRequest {
    pub fn new() -> HighlightRequest {
        ::std::default::Default::default()
    }

    // bool highlight = 1;


    pub fn get_highlight(&self) -> bool {
        self.highlight
    }
    pub fn clear_highlight(&mut self) {
        self.highlight = false;
    }

    // Param is passed by value, moved
    pub fn set_highlight(&mut self, v: bool) {
        self.highlight = v;
    }
}

impl ::protobuf::Message for HighlightRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.highlight = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.highlight != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.highlight != false {
            os.write_bool(1, self.highlight)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HighlightRequest {
        HighlightRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "highlight",
                |m: &HighlightRequest| { &m.highlight },
                |m: &mut HighlightRequest| { &mut m.highlight },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HighlightRequest>(
                "HighlightRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HighlightRequest {
        static instance: ::protobuf::rt::LazyV2<HighlightRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HighlightRequest::new)
    }
}

impl ::protobuf::Clear for HighlightRequest {
    fn clear(&mut self) {
        self.highlight = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HighlightRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HighlightRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct HighlightResponse {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HighlightResponse {
    fn default() -> &'a HighlightResponse {
        <HighlightResponse as ::protobuf::Message>::default_instance()
    }
}

impl HighlightResponse {
    pub fn new() -> HighlightResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for HighlightResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HighlightResponse {
        HighlightResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HighlightResponse>(
                "HighlightResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HighlightResponse {
        static instance: ::protobuf::rt::LazyV2<HighlightResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HighlightResponse::new)
    }
}

impl ::protobuf::Clear for HighlightResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HighlightResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HighlightResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct StoreRequest {
    // message fields
    pub sequence_id: u32,
    pub store_mode: StoreRequest_Mode,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StoreRequest {
    fn default() -> &'a StoreRequest {
        <StoreRequest as ::protobuf::Message>::default_instance()
    }
}

impl StoreRequest {
    pub fn new() -> StoreRequest {
        ::std::default::Default::default()
    }

    // uint32 sequence_id = 1;


    pub fn get_sequence_id(&self) -> u32 {
        self.sequence_id
    }
    pub fn clear_sequence_id(&mut self) {
        self.sequence_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence_id(&mut self, v: u32) {
        self.sequence_id = v;
    }

    // .mizer.programmer.StoreRequest.Mode store_mode = 2;


    pub fn get_store_mode(&self) -> StoreRequest_Mode {
        self.store_mode
    }
    pub fn clear_store_mode(&mut self) {
        self.store_mode = StoreRequest_Mode::Overwrite;
    }

    // Param is passed by value, moved
    pub fn set_store_mode(&mut self, v: StoreRequest_Mode) {
        self.store_mode = v;
    }
}

impl ::protobuf::Message for StoreRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.sequence_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.store_mode, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.sequence_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.sequence_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.store_mode != StoreRequest_Mode::Overwrite {
            my_size += ::protobuf::rt::enum_size(2, self.store_mode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.sequence_id != 0 {
            os.write_uint32(1, self.sequence_id)?;
        }
        if self.store_mode != StoreRequest_Mode::Overwrite {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.store_mode))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StoreRequest {
        StoreRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "sequence_id",
                |m: &StoreRequest| { &m.sequence_id },
                |m: &mut StoreRequest| { &mut m.sequence_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<StoreRequest_Mode>>(
                "store_mode",
                |m: &StoreRequest| { &m.store_mode },
                |m: &mut StoreRequest| { &mut m.store_mode },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StoreRequest>(
                "StoreRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StoreRequest {
        static instance: ::protobuf::rt::LazyV2<StoreRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StoreRequest::new)
    }
}

impl ::protobuf::Clear for StoreRequest {
    fn clear(&mut self) {
        self.sequence_id = 0;
        self.store_mode = StoreRequest_Mode::Overwrite;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StoreRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StoreRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum StoreRequest_Mode {
    Overwrite = 0,
    Merge = 1,
    AddCue = 2,
}

impl ::protobuf::ProtobufEnum for StoreRequest_Mode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<StoreRequest_Mode> {
        match value {
            0 => ::std::option::Option::Some(StoreRequest_Mode::Overwrite),
            1 => ::std::option::Option::Some(StoreRequest_Mode::Merge),
            2 => ::std::option::Option::Some(StoreRequest_Mode::AddCue),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [StoreRequest_Mode] = &[
            StoreRequest_Mode::Overwrite,
            StoreRequest_Mode::Merge,
            StoreRequest_Mode::AddCue,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<StoreRequest_Mode>("StoreRequest.Mode", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for StoreRequest_Mode {
}

impl ::std::default::Default for StoreRequest_Mode {
    fn default() -> Self {
        StoreRequest_Mode::Overwrite
    }
}

impl ::protobuf::reflect::ProtobufValue for StoreRequest_Mode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct StoreResponse {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StoreResponse {
    fn default() -> &'a StoreResponse {
        <StoreResponse as ::protobuf::Message>::default_instance()
    }
}

impl StoreResponse {
    pub fn new() -> StoreResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for StoreResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StoreResponse {
        StoreResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StoreResponse>(
                "StoreResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StoreResponse {
        static instance: ::protobuf::rt::LazyV2<StoreResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StoreResponse::new)
    }
}

impl ::protobuf::Clear for StoreResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StoreResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StoreResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct PresetsRequest {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PresetsRequest {
    fn default() -> &'a PresetsRequest {
        <PresetsRequest as ::protobuf::Message>::default_instance()
    }
}

impl PresetsRequest {
    pub fn new() -> PresetsRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for PresetsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PresetsRequest {
        PresetsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PresetsRequest>(
                "PresetsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PresetsRequest {
        static instance: ::protobuf::rt::LazyV2<PresetsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PresetsRequest::new)
    }
}

impl ::protobuf::Clear for PresetsRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PresetsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PresetsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct PresetId {
    // message fields
    pub id: u32,
    pub field_type: PresetId_PresetType,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PresetId {
    fn default() -> &'a PresetId {
        <PresetId as ::protobuf::Message>::default_instance()
    }
}

impl PresetId {
    pub fn new() -> PresetId {
        ::std::default::Default::default()
    }

    // uint32 id = 1;


    pub fn get_id(&self) -> u32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = v;
    }

    // .mizer.programmer.PresetId.PresetType type = 2;


    pub fn get_field_type(&self) -> PresetId_PresetType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = PresetId_PresetType::Intensity;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: PresetId_PresetType) {
        self.field_type = v;
    }
}

impl ::protobuf::Message for PresetId {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.field_type != PresetId_PresetType::Intensity {
            my_size += ::protobuf::rt::enum_size(2, self.field_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if self.field_type != PresetId_PresetType::Intensity {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PresetId {
        PresetId::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "id",
                |m: &PresetId| { &m.id },
                |m: &mut PresetId| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<PresetId_PresetType>>(
                "type",
                |m: &PresetId| { &m.field_type },
                |m: &mut PresetId| { &mut m.field_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PresetId>(
                "PresetId",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PresetId {
        static instance: ::protobuf::rt::LazyV2<PresetId> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PresetId::new)
    }
}

impl ::protobuf::Clear for PresetId {
    fn clear(&mut self) {
        self.id = 0;
        self.field_type = PresetId_PresetType::Intensity;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PresetId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PresetId {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum PresetId_PresetType {
    Intensity = 0,
    Shutter = 1,
    Color = 2,
    Position = 3,
}

impl ::protobuf::ProtobufEnum for PresetId_PresetType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PresetId_PresetType> {
        match value {
            0 => ::std::option::Option::Some(PresetId_PresetType::Intensity),
            1 => ::std::option::Option::Some(PresetId_PresetType::Shutter),
            2 => ::std::option::Option::Some(PresetId_PresetType::Color),
            3 => ::std::option::Option::Some(PresetId_PresetType::Position),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [PresetId_PresetType] = &[
            PresetId_PresetType::Intensity,
            PresetId_PresetType::Shutter,
            PresetId_PresetType::Color,
            PresetId_PresetType::Position,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<PresetId_PresetType>("PresetId.PresetType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for PresetId_PresetType {
}

impl ::std::default::Default for PresetId_PresetType {
    fn default() -> Self {
        PresetId_PresetType::Intensity
    }
}

impl ::protobuf::reflect::ProtobufValue for PresetId_PresetType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Presets {
    // message fields
    pub intensities: ::protobuf::RepeatedField<Preset>,
    pub shutter: ::protobuf::RepeatedField<Preset>,
    pub color: ::protobuf::RepeatedField<Preset>,
    pub position: ::protobuf::RepeatedField<Preset>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Presets {
    fn default() -> &'a Presets {
        <Presets as ::protobuf::Message>::default_instance()
    }
}

impl Presets {
    pub fn new() -> Presets {
        ::std::default::Default::default()
    }

    // repeated .mizer.programmer.Preset intensities = 1;


    pub fn get_intensities(&self) -> &[Preset] {
        &self.intensities
    }
    pub fn clear_intensities(&mut self) {
        self.intensities.clear();
    }

    // Param is passed by value, moved
    pub fn set_intensities(&mut self, v: ::protobuf::RepeatedField<Preset>) {
        self.intensities = v;
    }

    // Mutable pointer to the field.
    pub fn mut_intensities(&mut self) -> &mut ::protobuf::RepeatedField<Preset> {
        &mut self.intensities
    }

    // Take field
    pub fn take_intensities(&mut self) -> ::protobuf::RepeatedField<Preset> {
        ::std::mem::replace(&mut self.intensities, ::protobuf::RepeatedField::new())
    }

    // repeated .mizer.programmer.Preset shutter = 2;


    pub fn get_shutter(&self) -> &[Preset] {
        &self.shutter
    }
    pub fn clear_shutter(&mut self) {
        self.shutter.clear();
    }

    // Param is passed by value, moved
    pub fn set_shutter(&mut self, v: ::protobuf::RepeatedField<Preset>) {
        self.shutter = v;
    }

    // Mutable pointer to the field.
    pub fn mut_shutter(&mut self) -> &mut ::protobuf::RepeatedField<Preset> {
        &mut self.shutter
    }

    // Take field
    pub fn take_shutter(&mut self) -> ::protobuf::RepeatedField<Preset> {
        ::std::mem::replace(&mut self.shutter, ::protobuf::RepeatedField::new())
    }

    // repeated .mizer.programmer.Preset color = 3;


    pub fn get_color(&self) -> &[Preset] {
        &self.color
    }
    pub fn clear_color(&mut self) {
        self.color.clear();
    }

    // Param is passed by value, moved
    pub fn set_color(&mut self, v: ::protobuf::RepeatedField<Preset>) {
        self.color = v;
    }

    // Mutable pointer to the field.
    pub fn mut_color(&mut self) -> &mut ::protobuf::RepeatedField<Preset> {
        &mut self.color
    }

    // Take field
    pub fn take_color(&mut self) -> ::protobuf::RepeatedField<Preset> {
        ::std::mem::replace(&mut self.color, ::protobuf::RepeatedField::new())
    }

    // repeated .mizer.programmer.Preset position = 4;


    pub fn get_position(&self) -> &[Preset] {
        &self.position
    }
    pub fn clear_position(&mut self) {
        self.position.clear();
    }

    // Param is passed by value, moved
    pub fn set_position(&mut self, v: ::protobuf::RepeatedField<Preset>) {
        self.position = v;
    }

    // Mutable pointer to the field.
    pub fn mut_position(&mut self) -> &mut ::protobuf::RepeatedField<Preset> {
        &mut self.position
    }

    // Take field
    pub fn take_position(&mut self) -> ::protobuf::RepeatedField<Preset> {
        ::std::mem::replace(&mut self.position, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Presets {
    fn is_initialized(&self) -> bool {
        for v in &self.intensities {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.shutter {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.color {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.position {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.intensities)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.shutter)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.color)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.position)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.intensities {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.shutter {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.color {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.position {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.intensities {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.shutter {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.color {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.position {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Presets {
        Presets::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Preset>>(
                "intensities",
                |m: &Presets| { &m.intensities },
                |m: &mut Presets| { &mut m.intensities },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Preset>>(
                "shutter",
                |m: &Presets| { &m.shutter },
                |m: &mut Presets| { &mut m.shutter },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Preset>>(
                "color",
                |m: &Presets| { &m.color },
                |m: &mut Presets| { &mut m.color },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Preset>>(
                "position",
                |m: &Presets| { &m.position },
                |m: &mut Presets| { &mut m.position },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Presets>(
                "Presets",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Presets {
        static instance: ::protobuf::rt::LazyV2<Presets> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Presets::new)
    }
}

impl ::protobuf::Clear for Presets {
    fn clear(&mut self) {
        self.intensities.clear();
        self.shutter.clear();
        self.color.clear();
        self.position.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Presets {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Presets {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Preset {
    // message fields
    pub id: ::protobuf::SingularPtrField<PresetId>,
    // message oneof groups
    pub value: ::std::option::Option<Preset_oneof_value>,
    pub _label: ::std::option::Option<Preset_oneof__label>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Preset {
    fn default() -> &'a Preset {
        <Preset as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum Preset_oneof_value {
    fader(f64),
    color(Preset_Color),
    position(Preset_Position),
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum Preset_oneof__label {
    label(::std::string::String),
}

impl Preset {
    pub fn new() -> Preset {
        ::std::default::Default::default()
    }

    // .mizer.programmer.PresetId id = 1;


    pub fn get_id(&self) -> &PresetId {
        self.id.as_ref().unwrap_or_else(|| <PresetId as ::protobuf::Message>::default_instance())
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: PresetId) {
        self.id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut PresetId {
        if self.id.is_none() {
            self.id.set_default();
        }
        self.id.as_mut().unwrap()
    }

    // Take field
    pub fn take_id(&mut self) -> PresetId {
        self.id.take().unwrap_or_else(|| PresetId::new())
    }

    // string label = 2;


    pub fn get_label(&self) -> &str {
        match self._label {
            ::std::option::Option::Some(Preset_oneof__label::label(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_label(&mut self) {
        self._label = ::std::option::Option::None;
    }

    pub fn has_label(&self) -> bool {
        match self._label {
            ::std::option::Option::Some(Preset_oneof__label::label(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self._label = ::std::option::Option::Some(Preset_oneof__label::label(v))
    }

    // Mutable pointer to the field.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(Preset_oneof__label::label(_)) = self._label {
        } else {
            self._label = ::std::option::Option::Some(Preset_oneof__label::label(::std::string::String::new()));
        }
        match self._label {
            ::std::option::Option::Some(Preset_oneof__label::label(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        if self.has_label() {
            match self._label.take() {
                ::std::option::Option::Some(Preset_oneof__label::label(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // double fader = 3;


    pub fn get_fader(&self) -> f64 {
        match self.value {
            ::std::option::Option::Some(Preset_oneof_value::fader(v)) => v,
            _ => 0.,
        }
    }
    pub fn clear_fader(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_fader(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(Preset_oneof_value::fader(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fader(&mut self, v: f64) {
        self.value = ::std::option::Option::Some(Preset_oneof_value::fader(v))
    }

    // .mizer.programmer.Preset.Color color = 4;


    pub fn get_color(&self) -> &Preset_Color {
        match self.value {
            ::std::option::Option::Some(Preset_oneof_value::color(ref v)) => v,
            _ => <Preset_Color as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_color(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_color(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(Preset_oneof_value::color(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_color(&mut self, v: Preset_Color) {
        self.value = ::std::option::Option::Some(Preset_oneof_value::color(v))
    }

    // Mutable pointer to the field.
    pub fn mut_color(&mut self) -> &mut Preset_Color {
        if let ::std::option::Option::Some(Preset_oneof_value::color(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(Preset_oneof_value::color(Preset_Color::new()));
        }
        match self.value {
            ::std::option::Option::Some(Preset_oneof_value::color(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_color(&mut self) -> Preset_Color {
        if self.has_color() {
            match self.value.take() {
                ::std::option::Option::Some(Preset_oneof_value::color(v)) => v,
                _ => panic!(),
            }
        } else {
            Preset_Color::new()
        }
    }

    // .mizer.programmer.Preset.Position position = 5;


    pub fn get_position(&self) -> &Preset_Position {
        match self.value {
            ::std::option::Option::Some(Preset_oneof_value::position(ref v)) => v,
            _ => <Preset_Position as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_position(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_position(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(Preset_oneof_value::position(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_position(&mut self, v: Preset_Position) {
        self.value = ::std::option::Option::Some(Preset_oneof_value::position(v))
    }

    // Mutable pointer to the field.
    pub fn mut_position(&mut self) -> &mut Preset_Position {
        if let ::std::option::Option::Some(Preset_oneof_value::position(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(Preset_oneof_value::position(Preset_Position::new()));
        }
        match self.value {
            ::std::option::Option::Some(Preset_oneof_value::position(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_position(&mut self) -> Preset_Position {
        if self.has_position() {
            match self.value.take() {
                ::std::option::Option::Some(Preset_oneof_value::position(v)) => v,
                _ => panic!(),
            }
        } else {
            Preset_Position::new()
        }
    }
}

impl ::protobuf::Message for Preset {
    fn is_initialized(&self) -> bool {
        for v in &self.id {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(Preset_oneof_value::color(ref v)) = self.value {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Preset_oneof_value::position(ref v)) = self.value {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self._label = ::std::option::Option::Some(Preset_oneof__label::label(is.read_string()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(Preset_oneof_value::fader(is.read_double()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(Preset_oneof_value::color(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(Preset_oneof_value::position(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &Preset_oneof_value::fader(v) => {
                    my_size += 9;
                },
                &Preset_oneof_value::color(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Preset_oneof_value::position(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self._label {
            match v {
                &Preset_oneof__label::label(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.id.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &Preset_oneof_value::fader(v) => {
                    os.write_double(3, v)?;
                },
                &Preset_oneof_value::color(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Preset_oneof_value::position(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self._label {
            match v {
                &Preset_oneof__label::label(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Preset {
        Preset::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PresetId>>(
                "id",
                |m: &Preset| { &m.id },
                |m: &mut Preset| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "label",
                Preset::has_label,
                Preset::get_label,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor::<_>(
                "fader",
                Preset::has_fader,
                Preset::get_fader,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Preset_Color>(
                "color",
                Preset::has_color,
                Preset::get_color,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Preset_Position>(
                "position",
                Preset::has_position,
                Preset::get_position,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Preset>(
                "Preset",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Preset {
        static instance: ::protobuf::rt::LazyV2<Preset> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Preset::new)
    }
}

impl ::protobuf::Clear for Preset {
    fn clear(&mut self) {
        self.id.clear();
        self._label = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Preset {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Preset {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Preset_Color {
    // message fields
    pub red: f64,
    pub green: f64,
    pub blue: f64,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Preset_Color {
    fn default() -> &'a Preset_Color {
        <Preset_Color as ::protobuf::Message>::default_instance()
    }
}

impl Preset_Color {
    pub fn new() -> Preset_Color {
        ::std::default::Default::default()
    }

    // double red = 1;


    pub fn get_red(&self) -> f64 {
        self.red
    }
    pub fn clear_red(&mut self) {
        self.red = 0.;
    }

    // Param is passed by value, moved
    pub fn set_red(&mut self, v: f64) {
        self.red = v;
    }

    // double green = 2;


    pub fn get_green(&self) -> f64 {
        self.green
    }
    pub fn clear_green(&mut self) {
        self.green = 0.;
    }

    // Param is passed by value, moved
    pub fn set_green(&mut self, v: f64) {
        self.green = v;
    }

    // double blue = 3;


    pub fn get_blue(&self) -> f64 {
        self.blue
    }
    pub fn clear_blue(&mut self) {
        self.blue = 0.;
    }

    // Param is passed by value, moved
    pub fn set_blue(&mut self, v: f64) {
        self.blue = v;
    }
}

impl ::protobuf::Message for Preset_Color {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.red = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.green = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.blue = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.red != 0. {
            my_size += 9;
        }
        if self.green != 0. {
            my_size += 9;
        }
        if self.blue != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.red != 0. {
            os.write_double(1, self.red)?;
        }
        if self.green != 0. {
            os.write_double(2, self.green)?;
        }
        if self.blue != 0. {
            os.write_double(3, self.blue)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Preset_Color {
        Preset_Color::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "red",
                |m: &Preset_Color| { &m.red },
                |m: &mut Preset_Color| { &mut m.red },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "green",
                |m: &Preset_Color| { &m.green },
                |m: &mut Preset_Color| { &mut m.green },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "blue",
                |m: &Preset_Color| { &m.blue },
                |m: &mut Preset_Color| { &mut m.blue },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Preset_Color>(
                "Preset.Color",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Preset_Color {
        static instance: ::protobuf::rt::LazyV2<Preset_Color> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Preset_Color::new)
    }
}

impl ::protobuf::Clear for Preset_Color {
    fn clear(&mut self) {
        self.red = 0.;
        self.green = 0.;
        self.blue = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Preset_Color {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Preset_Color {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Preset_Position {
    // message fields
    pub tilt: f64,
    pub pan: f64,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Preset_Position {
    fn default() -> &'a Preset_Position {
        <Preset_Position as ::protobuf::Message>::default_instance()
    }
}

impl Preset_Position {
    pub fn new() -> Preset_Position {
        ::std::default::Default::default()
    }

    // double tilt = 1;


    pub fn get_tilt(&self) -> f64 {
        self.tilt
    }
    pub fn clear_tilt(&mut self) {
        self.tilt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tilt(&mut self, v: f64) {
        self.tilt = v;
    }

    // double pan = 2;


    pub fn get_pan(&self) -> f64 {
        self.pan
    }
    pub fn clear_pan(&mut self) {
        self.pan = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pan(&mut self, v: f64) {
        self.pan = v;
    }
}

impl ::protobuf::Message for Preset_Position {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tilt = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pan = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.tilt != 0. {
            my_size += 9;
        }
        if self.pan != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.tilt != 0. {
            os.write_double(1, self.tilt)?;
        }
        if self.pan != 0. {
            os.write_double(2, self.pan)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Preset_Position {
        Preset_Position::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "tilt",
                |m: &Preset_Position| { &m.tilt },
                |m: &mut Preset_Position| { &mut m.tilt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pan",
                |m: &Preset_Position| { &m.pan },
                |m: &mut Preset_Position| { &mut m.pan },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Preset_Position>(
                "Preset.Position",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Preset_Position {
        static instance: ::protobuf::rt::LazyV2<Preset_Position> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Preset_Position::new)
    }
}

impl ::protobuf::Clear for Preset_Position {
    fn clear(&mut self) {
        self.tilt = 0.;
        self.pan = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Preset_Position {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Preset_Position {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct CallPresetResponse {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CallPresetResponse {
    fn default() -> &'a CallPresetResponse {
        <CallPresetResponse as ::protobuf::Message>::default_instance()
    }
}

impl CallPresetResponse {
    pub fn new() -> CallPresetResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CallPresetResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CallPresetResponse {
        CallPresetResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CallPresetResponse>(
                "CallPresetResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CallPresetResponse {
        static instance: ::protobuf::rt::LazyV2<CallPresetResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CallPresetResponse::new)
    }
}

impl ::protobuf::Clear for CallPresetResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CallPresetResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CallPresetResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct GroupsRequest {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GroupsRequest {
    fn default() -> &'a GroupsRequest {
        <GroupsRequest as ::protobuf::Message>::default_instance()
    }
}

impl GroupsRequest {
    pub fn new() -> GroupsRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GroupsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GroupsRequest {
        GroupsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GroupsRequest>(
                "GroupsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GroupsRequest {
        static instance: ::protobuf::rt::LazyV2<GroupsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GroupsRequest::new)
    }
}

impl ::protobuf::Clear for GroupsRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GroupsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GroupsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Groups {
    // message fields
    pub groups: ::protobuf::RepeatedField<Group>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Groups {
    fn default() -> &'a Groups {
        <Groups as ::protobuf::Message>::default_instance()
    }
}

impl Groups {
    pub fn new() -> Groups {
        ::std::default::Default::default()
    }

    // repeated .mizer.programmer.Group groups = 1;


    pub fn get_groups(&self) -> &[Group] {
        &self.groups
    }
    pub fn clear_groups(&mut self) {
        self.groups.clear();
    }

    // Param is passed by value, moved
    pub fn set_groups(&mut self, v: ::protobuf::RepeatedField<Group>) {
        self.groups = v;
    }

    // Mutable pointer to the field.
    pub fn mut_groups(&mut self) -> &mut ::protobuf::RepeatedField<Group> {
        &mut self.groups
    }

    // Take field
    pub fn take_groups(&mut self) -> ::protobuf::RepeatedField<Group> {
        ::std::mem::replace(&mut self.groups, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Groups {
    fn is_initialized(&self) -> bool {
        for v in &self.groups {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.groups)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.groups {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.groups {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Groups {
        Groups::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Group>>(
                "groups",
                |m: &Groups| { &m.groups },
                |m: &mut Groups| { &mut m.groups },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Groups>(
                "Groups",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Groups {
        static instance: ::protobuf::rt::LazyV2<Groups> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Groups::new)
    }
}

impl ::protobuf::Clear for Groups {
    fn clear(&mut self) {
        self.groups.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Groups {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Groups {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Group {
    // message fields
    pub id: u32,
    pub name: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Group {
    fn default() -> &'a Group {
        <Group as ::protobuf::Message>::default_instance()
    }
}

impl Group {
    pub fn new() -> Group {
        ::std::default::Default::default()
    }

    // uint32 id = 1;


    pub fn get_id(&self) -> u32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = v;
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Group {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Group {
        Group::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "id",
                |m: &Group| { &m.id },
                |m: &mut Group| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Group| { &m.name },
                |m: &mut Group| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Group>(
                "Group",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Group {
        static instance: ::protobuf::rt::LazyV2<Group> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Group::new)
    }
}

impl ::protobuf::Clear for Group {
    fn clear(&mut self) {
        self.id = 0;
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Group {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Group {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SelectGroupRequest {
    // message fields
    pub id: u32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SelectGroupRequest {
    fn default() -> &'a SelectGroupRequest {
        <SelectGroupRequest as ::protobuf::Message>::default_instance()
    }
}

impl SelectGroupRequest {
    pub fn new() -> SelectGroupRequest {
        ::std::default::Default::default()
    }

    // uint32 id = 1;


    pub fn get_id(&self) -> u32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = v;
    }
}

impl ::protobuf::Message for SelectGroupRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SelectGroupRequest {
        SelectGroupRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "id",
                |m: &SelectGroupRequest| { &m.id },
                |m: &mut SelectGroupRequest| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SelectGroupRequest>(
                "SelectGroupRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SelectGroupRequest {
        static instance: ::protobuf::rt::LazyV2<SelectGroupRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SelectGroupRequest::new)
    }
}

impl ::protobuf::Clear for SelectGroupRequest {
    fn clear(&mut self) {
        self.id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SelectGroupRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SelectGroupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SelectGroupResponse {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SelectGroupResponse {
    fn default() -> &'a SelectGroupResponse {
        <SelectGroupResponse as ::protobuf::Message>::default_instance()
    }
}

impl SelectGroupResponse {
    pub fn new() -> SelectGroupResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for SelectGroupResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SelectGroupResponse {
        SelectGroupResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SelectGroupResponse>(
                "SelectGroupResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SelectGroupResponse {
        static instance: ::protobuf::rt::LazyV2<SelectGroupResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SelectGroupResponse::new)
    }
}

impl ::protobuf::Clear for SelectGroupResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SelectGroupResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SelectGroupResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct AddGroupRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddGroupRequest {
    fn default() -> &'a AddGroupRequest {
        <AddGroupRequest as ::protobuf::Message>::default_instance()
    }
}

impl AddGroupRequest {
    pub fn new() -> AddGroupRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AddGroupRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddGroupRequest {
        AddGroupRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &AddGroupRequest| { &m.name },
                |m: &mut AddGroupRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AddGroupRequest>(
                "AddGroupRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AddGroupRequest {
        static instance: ::protobuf::rt::LazyV2<AddGroupRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AddGroupRequest::new)
    }
}

impl ::protobuf::Clear for AddGroupRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddGroupRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddGroupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct AssignFixturesToGroupRequest {
    // message fields
    pub id: u32,
    pub fixtures: ::protobuf::RepeatedField<super::fixtures::FixtureId>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AssignFixturesToGroupRequest {
    fn default() -> &'a AssignFixturesToGroupRequest {
        <AssignFixturesToGroupRequest as ::protobuf::Message>::default_instance()
    }
}

impl AssignFixturesToGroupRequest {
    pub fn new() -> AssignFixturesToGroupRequest {
        ::std::default::Default::default()
    }

    // uint32 id = 1;


    pub fn get_id(&self) -> u32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = v;
    }

    // repeated .mizer.fixtures.FixtureId fixtures = 2;


    pub fn get_fixtures(&self) -> &[super::fixtures::FixtureId] {
        &self.fixtures
    }
    pub fn clear_fixtures(&mut self) {
        self.fixtures.clear();
    }

    // Param is passed by value, moved
    pub fn set_fixtures(&mut self, v: ::protobuf::RepeatedField<super::fixtures::FixtureId>) {
        self.fixtures = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fixtures(&mut self) -> &mut ::protobuf::RepeatedField<super::fixtures::FixtureId> {
        &mut self.fixtures
    }

    // Take field
    pub fn take_fixtures(&mut self) -> ::protobuf::RepeatedField<super::fixtures::FixtureId> {
        ::std::mem::replace(&mut self.fixtures, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AssignFixturesToGroupRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.fixtures {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.fixtures)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.fixtures {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        for v in &self.fixtures {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AssignFixturesToGroupRequest {
        AssignFixturesToGroupRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "id",
                |m: &AssignFixturesToGroupRequest| { &m.id },
                |m: &mut AssignFixturesToGroupRequest| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::fixtures::FixtureId>>(
                "fixtures",
                |m: &AssignFixturesToGroupRequest| { &m.fixtures },
                |m: &mut AssignFixturesToGroupRequest| { &mut m.fixtures },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AssignFixturesToGroupRequest>(
                "AssignFixturesToGroupRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AssignFixturesToGroupRequest {
        static instance: ::protobuf::rt::LazyV2<AssignFixturesToGroupRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AssignFixturesToGroupRequest::new)
    }
}

impl ::protobuf::Clear for AssignFixturesToGroupRequest {
    fn clear(&mut self) {
        self.id = 0;
        self.fixtures.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AssignFixturesToGroupRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AssignFixturesToGroupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct AssignFixtureSelectionToGroupRequest {
    // message fields
    pub id: u32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AssignFixtureSelectionToGroupRequest {
    fn default() -> &'a AssignFixtureSelectionToGroupRequest {
        <AssignFixtureSelectionToGroupRequest as ::protobuf::Message>::default_instance()
    }
}

impl AssignFixtureSelectionToGroupRequest {
    pub fn new() -> AssignFixtureSelectionToGroupRequest {
        ::std::default::Default::default()
    }

    // uint32 id = 1;


    pub fn get_id(&self) -> u32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = v;
    }
}

impl ::protobuf::Message for AssignFixtureSelectionToGroupRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AssignFixtureSelectionToGroupRequest {
        AssignFixtureSelectionToGroupRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "id",
                |m: &AssignFixtureSelectionToGroupRequest| { &m.id },
                |m: &mut AssignFixtureSelectionToGroupRequest| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AssignFixtureSelectionToGroupRequest>(
                "AssignFixtureSelectionToGroupRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AssignFixtureSelectionToGroupRequest {
        static instance: ::protobuf::rt::LazyV2<AssignFixtureSelectionToGroupRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AssignFixtureSelectionToGroupRequest::new)
    }
}

impl ::protobuf::Clear for AssignFixtureSelectionToGroupRequest {
    fn clear(&mut self) {
        self.id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AssignFixtureSelectionToGroupRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AssignFixtureSelectionToGroupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct AssignFixturesToGroupResponse {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AssignFixturesToGroupResponse {
    fn default() -> &'a AssignFixturesToGroupResponse {
        <AssignFixturesToGroupResponse as ::protobuf::Message>::default_instance()
    }
}

impl AssignFixturesToGroupResponse {
    pub fn new() -> AssignFixturesToGroupResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for AssignFixturesToGroupResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AssignFixturesToGroupResponse {
        AssignFixturesToGroupResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AssignFixturesToGroupResponse>(
                "AssignFixturesToGroupResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AssignFixturesToGroupResponse {
        static instance: ::protobuf::rt::LazyV2<AssignFixturesToGroupResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AssignFixturesToGroupResponse::new)
    }
}

impl ::protobuf::Clear for AssignFixturesToGroupResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AssignFixturesToGroupResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AssignFixturesToGroupResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10programmer.proto\x12\x10mizer.programmer\x1a\x0efixtures.proto\"\
    \x1c\n\x1aSubscribeProgrammerRequest\"\xeb\x01\n\x0fProgrammerState\x125\
    \n\x08fixtures\x18\x01\x20\x03(\x0b2\x19.mizer.fixtures.FixtureIdR\x08fi\
    xtures\x12B\n\x0factive_fixtures\x18\x02\x20\x03(\x0b2\x19.mizer.fixture\
    s.FixtureIdR\x0eactiveFixtures\x12?\n\x08controls\x18\x03\x20\x03(\x0b2#\
    .mizer.programmer.ProgrammerChannelR\x08controls\x12\x1c\n\thighlight\
    \x18\x04\x20\x01(\x08R\thighlight\"\x96\x03\n\x11ProgrammerChannel\x125\
    \n\x08fixtures\x18\x01\x20\x03(\x0b2\x19.mizer.fixtures.FixtureIdR\x08fi\
    xtures\x128\n\x07control\x18\x02\x20\x01(\x0e2\x1e.mizer.fixtures.Fixtur\
    eControlR\x07control\x12\x16\n\x05fader\x18\x03\x20\x01(\x01H\0R\x05fade\
    r\x129\n\x05color\x18\x04\x20\x01(\x0b2!.mizer.fixtures.ColorMixerChanne\
    lH\0R\x05color\x12L\n\x07generic\x18\x05\x20\x01(\x0b20.mizer.programmer\
    .ProgrammerChannel.GenericValueH\0R\x07generic\x1a8\n\x0cGenericValue\
    \x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x14\n\x05value\x18\
    \x02\x20\x01(\x01R\x05value\",\n\x0cColorChannel\x12\x07\n\x03Red\x10\0\
    \x12\t\n\x05Green\x10\x01\x12\x08\n\x04Blue\x10\x02B\x07\n\x05value\"\
    \xb5\x02\n\x13WriteControlRequest\x128\n\x07control\x18\x01\x20\x01(\x0e\
    2\x1e.mizer.fixtures.FixtureControlR\x07control\x12\x16\n\x05fader\x18\
    \x02\x20\x01(\x01H\0R\x05fader\x129\n\x05color\x18\x03\x20\x01(\x0b2!.mi\
    zer.fixtures.ColorMixerChannelH\0R\x05color\x12N\n\x07generic\x18\x04\
    \x20\x01(\x0b22.mizer.programmer.WriteControlRequest.GenericValueH\0R\
    \x07generic\x1a8\n\x0cGenericValue\x12\x12\n\x04name\x18\x01\x20\x01(\tR\
    \x04name\x12\x14\n\x05value\x18\x02\x20\x01(\x01R\x05valueB\x07\n\x05val\
    ue\"\x16\n\x14WriteControlResponse\"N\n\x15SelectFixturesRequest\x125\n\
    \x08fixtures\x18\x01\x20\x03(\x0b2\x19.mizer.fixtures.FixtureIdR\x08fixt\
    ures\"\x18\n\x16SelectFixturesResponse\"\x0e\n\x0cClearRequest\"\x0f\n\r\
    ClearResponse\"0\n\x10HighlightRequest\x12\x1c\n\thighlight\x18\x01\x20\
    \x01(\x08R\thighlight\"\x13\n\x11HighlightResponse\"\xa1\x01\n\x0cStoreR\
    equest\x12\x1f\n\x0bsequence_id\x18\x01\x20\x01(\rR\nsequenceId\x12B\n\n\
    store_mode\x18\x02\x20\x01(\x0e2#.mizer.programmer.StoreRequest.ModeR\ts\
    toreMode\",\n\x04Mode\x12\r\n\tOverwrite\x10\0\x12\t\n\x05Merge\x10\x01\
    \x12\n\n\x06AddCue\x10\x02\"\x0f\n\rStoreResponse\"\x10\n\x0ePresetsRequ\
    est\"\x98\x01\n\x08PresetId\x12\x0e\n\x02id\x18\x01\x20\x01(\rR\x02id\
    \x129\n\x04type\x18\x02\x20\x01(\x0e2%.mizer.programmer.PresetId.PresetT\
    ypeR\x04type\"A\n\nPresetType\x12\r\n\tIntensity\x10\0\x12\x0b\n\x07Shut\
    ter\x10\x01\x12\t\n\x05Color\x10\x02\x12\x0c\n\x08Position\x10\x03\"\xdf\
    \x01\n\x07Presets\x12:\n\x0bintensities\x18\x01\x20\x03(\x0b2\x18.mizer.\
    programmer.PresetR\x0bintensities\x122\n\x07shutter\x18\x02\x20\x03(\x0b\
    2\x18.mizer.programmer.PresetR\x07shutter\x12.\n\x05color\x18\x03\x20\
    \x03(\x0b2\x18.mizer.programmer.PresetR\x05color\x124\n\x08position\x18\
    \x04\x20\x03(\x0b2\x18.mizer.programmer.PresetR\x08position\"\xea\x02\n\
    \x06Preset\x12*\n\x02id\x18\x01\x20\x01(\x0b2\x1a.mizer.programmer.Prese\
    tIdR\x02id\x12\x19\n\x05label\x18\x02\x20\x01(\tH\x01R\x05label\x88\x01\
    \x01\x12\x16\n\x05fader\x18\x03\x20\x01(\x01H\0R\x05fader\x126\n\x05colo\
    r\x18\x04\x20\x01(\x0b2\x1e.mizer.programmer.Preset.ColorH\0R\x05color\
    \x12?\n\x08position\x18\x05\x20\x01(\x0b2!.mizer.programmer.Preset.Posit\
    ionH\0R\x08position\x1aC\n\x05Color\x12\x10\n\x03red\x18\x01\x20\x01(\
    \x01R\x03red\x12\x14\n\x05green\x18\x02\x20\x01(\x01R\x05green\x12\x12\n\
    \x04blue\x18\x03\x20\x01(\x01R\x04blue\x1a0\n\x08Position\x12\x12\n\x04t\
    ilt\x18\x01\x20\x01(\x01R\x04tilt\x12\x10\n\x03pan\x18\x02\x20\x01(\x01R\
    \x03panB\x07\n\x05valueB\x08\n\x06_label\"\x14\n\x12CallPresetResponse\"\
    \x0f\n\rGroupsRequest\"9\n\x06Groups\x12/\n\x06groups\x18\x01\x20\x03(\
    \x0b2\x17.mizer.programmer.GroupR\x06groups\"+\n\x05Group\x12\x0e\n\x02i\
    d\x18\x01\x20\x01(\rR\x02id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04nam\
    e\"$\n\x12SelectGroupRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\rR\x02id\"\
    \x15\n\x13SelectGroupResponse\"%\n\x0fAddGroupRequest\x12\x12\n\x04name\
    \x18\x01\x20\x01(\tR\x04name\"e\n\x1cAssignFixturesToGroupRequest\x12\
    \x0e\n\x02id\x18\x01\x20\x01(\rR\x02id\x125\n\x08fixtures\x18\x02\x20\
    \x03(\x0b2\x19.mizer.fixtures.FixtureIdR\x08fixtures\"6\n$AssignFixtureS\
    electionToGroupRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\rR\x02id\"\x1f\n\
    \x1dAssignFixturesToGroupResponse2\xcf\t\n\rProgrammerApi\x12l\n\x15Subs\
    cribeToProgrammer\x12,.mizer.programmer.SubscribeProgrammerRequest\x1a!.\
    mizer.programmer.ProgrammerState\"\00\x01\x12_\n\x0cWriteControl\x12%.mi\
    zer.programmer.WriteControlRequest\x1a&.mizer.programmer.WriteControlRes\
    ponse\"\0\x12e\n\x0eSelectFixtures\x12'.mizer.programmer.SelectFixturesR\
    equest\x1a(.mizer.programmer.SelectFixturesResponse\"\0\x12J\n\x05Clear\
    \x12\x1e.mizer.programmer.ClearRequest\x1a\x1f.mizer.programmer.ClearRes\
    ponse\"\0\x12V\n\tHighlight\x12\".mizer.programmer.HighlightRequest\x1a#\
    .mizer.programmer.HighlightResponse\"\0\x12J\n\x05Store\x12\x1e.mizer.pr\
    ogrammer.StoreRequest\x1a\x1f.mizer.programmer.StoreResponse\"\0\x12K\n\
    \nGetPresets\x12\x20.mizer.programmer.PresetsRequest\x1a\x19.mizer.progr\
    ammer.Presets\"\0\x12P\n\nCallPreset\x12\x1a.mizer.programmer.PresetId\
    \x1a$.mizer.programmer.CallPresetResponse\"\0\x12H\n\tGetGroups\x12\x1f.\
    mizer.programmer.GroupsRequest\x1a\x18.mizer.programmer.Groups\"\0\x12\\\
    \n\x0bSelectGroup\x12$.mizer.programmer.SelectGroupRequest\x1a%.mizer.pr\
    ogrammer.SelectGroupResponse\"\0\x12H\n\x08AddGroup\x12!.mizer.programme\
    r.AddGroupRequest\x1a\x17.mizer.programmer.Group\"\0\x12z\n\x15AssignFix\
    turesToGroup\x12..mizer.programmer.AssignFixturesToGroupRequest\x1a/.miz\
    er.programmer.AssignFixturesToGroupResponse\"\0\x12\x8a\x01\n\x1dAssignF\
    ixtureSelectionToGroup\x126.mizer.programmer.AssignFixtureSelectionToGro\
    upRequest\x1a/.mizer.programmer.AssignFixturesToGroupResponse\"\0b\x06pr\
    oto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
