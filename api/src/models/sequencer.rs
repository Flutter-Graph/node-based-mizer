// This file is generated by rust-protobuf 2.25.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `sequencer.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_0;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct GetSequencesRequest {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetSequencesRequest {
    fn default() -> &'a GetSequencesRequest {
        <GetSequencesRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetSequencesRequest {
    pub fn new() -> GetSequencesRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetSequencesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetSequencesRequest {
        GetSequencesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetSequencesRequest>(
                "GetSequencesRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetSequencesRequest {
        static instance: ::protobuf::rt::LazyV2<GetSequencesRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetSequencesRequest::new)
    }
}

impl ::protobuf::Clear for GetSequencesRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetSequencesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetSequencesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct GetSequenceRequest {
    // message fields
    pub sequence: u32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetSequenceRequest {
    fn default() -> &'a GetSequenceRequest {
        <GetSequenceRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetSequenceRequest {
    pub fn new() -> GetSequenceRequest {
        ::std::default::Default::default()
    }

    // uint32 sequence = 1;


    pub fn get_sequence(&self) -> u32 {
        self.sequence
    }
    pub fn clear_sequence(&mut self) {
        self.sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: u32) {
        self.sequence = v;
    }
}

impl ::protobuf::Message for GetSequenceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.sequence = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.sequence != 0 {
            my_size += ::protobuf::rt::value_size(1, self.sequence, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.sequence != 0 {
            os.write_uint32(1, self.sequence)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetSequenceRequest {
        GetSequenceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "sequence",
                |m: &GetSequenceRequest| { &m.sequence },
                |m: &mut GetSequenceRequest| { &mut m.sequence },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetSequenceRequest>(
                "GetSequenceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetSequenceRequest {
        static instance: ::protobuf::rt::LazyV2<GetSequenceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetSequenceRequest::new)
    }
}

impl ::protobuf::Clear for GetSequenceRequest {
    fn clear(&mut self) {
        self.sequence = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetSequenceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetSequenceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct AddSequenceRequest {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddSequenceRequest {
    fn default() -> &'a AddSequenceRequest {
        <AddSequenceRequest as ::protobuf::Message>::default_instance()
    }
}

impl AddSequenceRequest {
    pub fn new() -> AddSequenceRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for AddSequenceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddSequenceRequest {
        AddSequenceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AddSequenceRequest>(
                "AddSequenceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AddSequenceRequest {
        static instance: ::protobuf::rt::LazyV2<AddSequenceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AddSequenceRequest::new)
    }
}

impl ::protobuf::Clear for AddSequenceRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddSequenceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddSequenceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct DeleteSequenceRequest {
    // message fields
    pub sequence: u32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteSequenceRequest {
    fn default() -> &'a DeleteSequenceRequest {
        <DeleteSequenceRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteSequenceRequest {
    pub fn new() -> DeleteSequenceRequest {
        ::std::default::Default::default()
    }

    // uint32 sequence = 1;


    pub fn get_sequence(&self) -> u32 {
        self.sequence
    }
    pub fn clear_sequence(&mut self) {
        self.sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: u32) {
        self.sequence = v;
    }
}

impl ::protobuf::Message for DeleteSequenceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.sequence = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.sequence != 0 {
            my_size += ::protobuf::rt::value_size(1, self.sequence, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.sequence != 0 {
            os.write_uint32(1, self.sequence)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteSequenceRequest {
        DeleteSequenceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "sequence",
                |m: &DeleteSequenceRequest| { &m.sequence },
                |m: &mut DeleteSequenceRequest| { &mut m.sequence },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteSequenceRequest>(
                "DeleteSequenceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteSequenceRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteSequenceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteSequenceRequest::new)
    }
}

impl ::protobuf::Clear for DeleteSequenceRequest {
    fn clear(&mut self) {
        self.sequence = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteSequenceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteSequenceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SequenceGoRequest {
    // message fields
    pub sequence: u32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SequenceGoRequest {
    fn default() -> &'a SequenceGoRequest {
        <SequenceGoRequest as ::protobuf::Message>::default_instance()
    }
}

impl SequenceGoRequest {
    pub fn new() -> SequenceGoRequest {
        ::std::default::Default::default()
    }

    // uint32 sequence = 1;


    pub fn get_sequence(&self) -> u32 {
        self.sequence
    }
    pub fn clear_sequence(&mut self) {
        self.sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: u32) {
        self.sequence = v;
    }
}

impl ::protobuf::Message for SequenceGoRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.sequence = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.sequence != 0 {
            my_size += ::protobuf::rt::value_size(1, self.sequence, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.sequence != 0 {
            os.write_uint32(1, self.sequence)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SequenceGoRequest {
        SequenceGoRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "sequence",
                |m: &SequenceGoRequest| { &m.sequence },
                |m: &mut SequenceGoRequest| { &mut m.sequence },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SequenceGoRequest>(
                "SequenceGoRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SequenceGoRequest {
        static instance: ::protobuf::rt::LazyV2<SequenceGoRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SequenceGoRequest::new)
    }
}

impl ::protobuf::Clear for SequenceGoRequest {
    fn clear(&mut self) {
        self.sequence = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SequenceGoRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SequenceGoRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct CueTriggerRequest {
    // message fields
    pub sequence: u32,
    pub cue: u32,
    pub trigger: CueTrigger,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CueTriggerRequest {
    fn default() -> &'a CueTriggerRequest {
        <CueTriggerRequest as ::protobuf::Message>::default_instance()
    }
}

impl CueTriggerRequest {
    pub fn new() -> CueTriggerRequest {
        ::std::default::Default::default()
    }

    // uint32 sequence = 1;


    pub fn get_sequence(&self) -> u32 {
        self.sequence
    }
    pub fn clear_sequence(&mut self) {
        self.sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: u32) {
        self.sequence = v;
    }

    // uint32 cue = 2;


    pub fn get_cue(&self) -> u32 {
        self.cue
    }
    pub fn clear_cue(&mut self) {
        self.cue = 0;
    }

    // Param is passed by value, moved
    pub fn set_cue(&mut self, v: u32) {
        self.cue = v;
    }

    // .mizer.sequencer.CueTrigger trigger = 3;


    pub fn get_trigger(&self) -> CueTrigger {
        self.trigger
    }
    pub fn clear_trigger(&mut self) {
        self.trigger = CueTrigger::GO;
    }

    // Param is passed by value, moved
    pub fn set_trigger(&mut self, v: CueTrigger) {
        self.trigger = v;
    }
}

impl ::protobuf::Message for CueTriggerRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.sequence = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.cue = tmp;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.trigger, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.sequence != 0 {
            my_size += ::protobuf::rt::value_size(1, self.sequence, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cue != 0 {
            my_size += ::protobuf::rt::value_size(2, self.cue, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.trigger != CueTrigger::GO {
            my_size += ::protobuf::rt::enum_size(3, self.trigger);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.sequence != 0 {
            os.write_uint32(1, self.sequence)?;
        }
        if self.cue != 0 {
            os.write_uint32(2, self.cue)?;
        }
        if self.trigger != CueTrigger::GO {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.trigger))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CueTriggerRequest {
        CueTriggerRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "sequence",
                |m: &CueTriggerRequest| { &m.sequence },
                |m: &mut CueTriggerRequest| { &mut m.sequence },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "cue",
                |m: &CueTriggerRequest| { &m.cue },
                |m: &mut CueTriggerRequest| { &mut m.cue },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CueTrigger>>(
                "trigger",
                |m: &CueTriggerRequest| { &m.trigger },
                |m: &mut CueTriggerRequest| { &mut m.trigger },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CueTriggerRequest>(
                "CueTriggerRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CueTriggerRequest {
        static instance: ::protobuf::rt::LazyV2<CueTriggerRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CueTriggerRequest::new)
    }
}

impl ::protobuf::Clear for CueTriggerRequest {
    fn clear(&mut self) {
        self.sequence = 0;
        self.cue = 0;
        self.trigger = CueTrigger::GO;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CueTriggerRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CueTriggerRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct EmptyResponse {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EmptyResponse {
    fn default() -> &'a EmptyResponse {
        <EmptyResponse as ::protobuf::Message>::default_instance()
    }
}

impl EmptyResponse {
    pub fn new() -> EmptyResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for EmptyResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EmptyResponse {
        EmptyResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EmptyResponse>(
                "EmptyResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EmptyResponse {
        static instance: ::protobuf::rt::LazyV2<EmptyResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EmptyResponse::new)
    }
}

impl ::protobuf::Clear for EmptyResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EmptyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EmptyResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Sequences {
    // message fields
    pub sequences: ::protobuf::RepeatedField<Sequence>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Sequences {
    fn default() -> &'a Sequences {
        <Sequences as ::protobuf::Message>::default_instance()
    }
}

impl Sequences {
    pub fn new() -> Sequences {
        ::std::default::Default::default()
    }

    // repeated .mizer.sequencer.Sequence sequences = 1;


    pub fn get_sequences(&self) -> &[Sequence] {
        &self.sequences
    }
    pub fn clear_sequences(&mut self) {
        self.sequences.clear();
    }

    // Param is passed by value, moved
    pub fn set_sequences(&mut self, v: ::protobuf::RepeatedField<Sequence>) {
        self.sequences = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sequences(&mut self) -> &mut ::protobuf::RepeatedField<Sequence> {
        &mut self.sequences
    }

    // Take field
    pub fn take_sequences(&mut self) -> ::protobuf::RepeatedField<Sequence> {
        ::std::mem::replace(&mut self.sequences, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Sequences {
    fn is_initialized(&self) -> bool {
        for v in &self.sequences {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.sequences)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.sequences {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.sequences {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Sequences {
        Sequences::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Sequence>>(
                "sequences",
                |m: &Sequences| { &m.sequences },
                |m: &mut Sequences| { &mut m.sequences },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Sequences>(
                "Sequences",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Sequences {
        static instance: ::protobuf::rt::LazyV2<Sequences> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Sequences::new)
    }
}

impl ::protobuf::Clear for Sequences {
    fn clear(&mut self) {
        self.sequences.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Sequences {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Sequences {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Sequence {
    // message fields
    pub id: u32,
    pub name: ::std::string::String,
    pub cues: ::protobuf::RepeatedField<Cue>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Sequence {
    fn default() -> &'a Sequence {
        <Sequence as ::protobuf::Message>::default_instance()
    }
}

impl Sequence {
    pub fn new() -> Sequence {
        ::std::default::Default::default()
    }

    // uint32 id = 1;


    pub fn get_id(&self) -> u32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = v;
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // repeated .mizer.sequencer.Cue cues = 3;


    pub fn get_cues(&self) -> &[Cue] {
        &self.cues
    }
    pub fn clear_cues(&mut self) {
        self.cues.clear();
    }

    // Param is passed by value, moved
    pub fn set_cues(&mut self, v: ::protobuf::RepeatedField<Cue>) {
        self.cues = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cues(&mut self) -> &mut ::protobuf::RepeatedField<Cue> {
        &mut self.cues
    }

    // Take field
    pub fn take_cues(&mut self) -> ::protobuf::RepeatedField<Cue> {
        ::std::mem::replace(&mut self.cues, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Sequence {
    fn is_initialized(&self) -> bool {
        for v in &self.cues {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cues)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        for value in &self.cues {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        for v in &self.cues {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Sequence {
        Sequence::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "id",
                |m: &Sequence| { &m.id },
                |m: &mut Sequence| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Sequence| { &m.name },
                |m: &mut Sequence| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cue>>(
                "cues",
                |m: &Sequence| { &m.cues },
                |m: &mut Sequence| { &mut m.cues },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Sequence>(
                "Sequence",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Sequence {
        static instance: ::protobuf::rt::LazyV2<Sequence> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Sequence::new)
    }
}

impl ::protobuf::Clear for Sequence {
    fn clear(&mut self) {
        self.id = 0;
        self.name.clear();
        self.cues.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Sequence {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Sequence {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Cue {
    // message fields
    pub id: u32,
    pub name: ::std::string::String,
    pub trigger: CueTrigger,
    pub field_loop: bool,
    pub channels: ::protobuf::RepeatedField<CueChannel>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cue {
    fn default() -> &'a Cue {
        <Cue as ::protobuf::Message>::default_instance()
    }
}

impl Cue {
    pub fn new() -> Cue {
        ::std::default::Default::default()
    }

    // uint32 id = 1;


    pub fn get_id(&self) -> u32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = v;
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .mizer.sequencer.CueTrigger trigger = 3;


    pub fn get_trigger(&self) -> CueTrigger {
        self.trigger
    }
    pub fn clear_trigger(&mut self) {
        self.trigger = CueTrigger::GO;
    }

    // Param is passed by value, moved
    pub fn set_trigger(&mut self, v: CueTrigger) {
        self.trigger = v;
    }

    // bool loop = 4;


    pub fn get_field_loop(&self) -> bool {
        self.field_loop
    }
    pub fn clear_field_loop(&mut self) {
        self.field_loop = false;
    }

    // Param is passed by value, moved
    pub fn set_field_loop(&mut self, v: bool) {
        self.field_loop = v;
    }

    // repeated .mizer.sequencer.CueChannel channels = 5;


    pub fn get_channels(&self) -> &[CueChannel] {
        &self.channels
    }
    pub fn clear_channels(&mut self) {
        self.channels.clear();
    }

    // Param is passed by value, moved
    pub fn set_channels(&mut self, v: ::protobuf::RepeatedField<CueChannel>) {
        self.channels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_channels(&mut self) -> &mut ::protobuf::RepeatedField<CueChannel> {
        &mut self.channels
    }

    // Take field
    pub fn take_channels(&mut self) -> ::protobuf::RepeatedField<CueChannel> {
        ::std::mem::replace(&mut self.channels, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Cue {
    fn is_initialized(&self) -> bool {
        for v in &self.channels {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.trigger, 3, &mut self.unknown_fields)?
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.field_loop = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.channels)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.trigger != CueTrigger::GO {
            my_size += ::protobuf::rt::enum_size(3, self.trigger);
        }
        if self.field_loop != false {
            my_size += 2;
        }
        for value in &self.channels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.trigger != CueTrigger::GO {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.trigger))?;
        }
        if self.field_loop != false {
            os.write_bool(4, self.field_loop)?;
        }
        for v in &self.channels {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cue {
        Cue::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "id",
                |m: &Cue| { &m.id },
                |m: &mut Cue| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Cue| { &m.name },
                |m: &mut Cue| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CueTrigger>>(
                "trigger",
                |m: &Cue| { &m.trigger },
                |m: &mut Cue| { &mut m.trigger },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "loop",
                |m: &Cue| { &m.field_loop },
                |m: &mut Cue| { &mut m.field_loop },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CueChannel>>(
                "channels",
                |m: &Cue| { &m.channels },
                |m: &mut Cue| { &mut m.channels },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cue>(
                "Cue",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cue {
        static instance: ::protobuf::rt::LazyV2<Cue> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cue::new)
    }
}

impl ::protobuf::Clear for Cue {
    fn clear(&mut self) {
        self.id = 0;
        self.name.clear();
        self.trigger = CueTrigger::GO;
        self.field_loop = false;
        self.channels.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cue {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct CueChannel {
    // message fields
    pub fixtures: ::protobuf::RepeatedField<super::fixtures::FixtureId>,
    pub control: CueControl,
    pub value: ::protobuf::SingularPtrField<CueValue>,
    pub fade: ::protobuf::SingularPtrField<CueTimer>,
    pub delay: ::protobuf::SingularPtrField<CueTimer>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CueChannel {
    fn default() -> &'a CueChannel {
        <CueChannel as ::protobuf::Message>::default_instance()
    }
}

impl CueChannel {
    pub fn new() -> CueChannel {
        ::std::default::Default::default()
    }

    // repeated .mizer.fixtures.FixtureId fixtures = 1;


    pub fn get_fixtures(&self) -> &[super::fixtures::FixtureId] {
        &self.fixtures
    }
    pub fn clear_fixtures(&mut self) {
        self.fixtures.clear();
    }

    // Param is passed by value, moved
    pub fn set_fixtures(&mut self, v: ::protobuf::RepeatedField<super::fixtures::FixtureId>) {
        self.fixtures = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fixtures(&mut self) -> &mut ::protobuf::RepeatedField<super::fixtures::FixtureId> {
        &mut self.fixtures
    }

    // Take field
    pub fn take_fixtures(&mut self) -> ::protobuf::RepeatedField<super::fixtures::FixtureId> {
        ::std::mem::replace(&mut self.fixtures, ::protobuf::RepeatedField::new())
    }

    // .mizer.sequencer.CueControl control = 2;


    pub fn get_control(&self) -> CueControl {
        self.control
    }
    pub fn clear_control(&mut self) {
        self.control = CueControl::INTENSITY;
    }

    // Param is passed by value, moved
    pub fn set_control(&mut self, v: CueControl) {
        self.control = v;
    }

    // .mizer.sequencer.CueValue value = 3;


    pub fn get_value(&self) -> &CueValue {
        self.value.as_ref().unwrap_or_else(|| <CueValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: CueValue) {
        self.value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut CueValue {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> CueValue {
        self.value.take().unwrap_or_else(|| CueValue::new())
    }

    // .mizer.sequencer.CueTimer fade = 4;


    pub fn get_fade(&self) -> &CueTimer {
        self.fade.as_ref().unwrap_or_else(|| <CueTimer as ::protobuf::Message>::default_instance())
    }
    pub fn clear_fade(&mut self) {
        self.fade.clear();
    }

    pub fn has_fade(&self) -> bool {
        self.fade.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fade(&mut self, v: CueTimer) {
        self.fade = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fade(&mut self) -> &mut CueTimer {
        if self.fade.is_none() {
            self.fade.set_default();
        }
        self.fade.as_mut().unwrap()
    }

    // Take field
    pub fn take_fade(&mut self) -> CueTimer {
        self.fade.take().unwrap_or_else(|| CueTimer::new())
    }

    // .mizer.sequencer.CueTimer delay = 5;


    pub fn get_delay(&self) -> &CueTimer {
        self.delay.as_ref().unwrap_or_else(|| <CueTimer as ::protobuf::Message>::default_instance())
    }
    pub fn clear_delay(&mut self) {
        self.delay.clear();
    }

    pub fn has_delay(&self) -> bool {
        self.delay.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delay(&mut self, v: CueTimer) {
        self.delay = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_delay(&mut self) -> &mut CueTimer {
        if self.delay.is_none() {
            self.delay.set_default();
        }
        self.delay.as_mut().unwrap()
    }

    // Take field
    pub fn take_delay(&mut self) -> CueTimer {
        self.delay.take().unwrap_or_else(|| CueTimer::new())
    }
}

impl ::protobuf::Message for CueChannel {
    fn is_initialized(&self) -> bool {
        for v in &self.fixtures {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.value {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.fade {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.delay {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.fixtures)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.control, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.value)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.fade)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.delay)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.fixtures {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.control != CueControl::INTENSITY {
            my_size += ::protobuf::rt::enum_size(2, self.control);
        }
        if let Some(ref v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.fade.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.delay.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.fixtures {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.control != CueControl::INTENSITY {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.control))?;
        }
        if let Some(ref v) = self.value.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.fade.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.delay.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CueChannel {
        CueChannel::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::fixtures::FixtureId>>(
                "fixtures",
                |m: &CueChannel| { &m.fixtures },
                |m: &mut CueChannel| { &mut m.fixtures },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CueControl>>(
                "control",
                |m: &CueChannel| { &m.control },
                |m: &mut CueChannel| { &mut m.control },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CueValue>>(
                "value",
                |m: &CueChannel| { &m.value },
                |m: &mut CueChannel| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CueTimer>>(
                "fade",
                |m: &CueChannel| { &m.fade },
                |m: &mut CueChannel| { &mut m.fade },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CueTimer>>(
                "delay",
                |m: &CueChannel| { &m.delay },
                |m: &mut CueChannel| { &mut m.delay },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CueChannel>(
                "CueChannel",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CueChannel {
        static instance: ::protobuf::rt::LazyV2<CueChannel> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CueChannel::new)
    }
}

impl ::protobuf::Clear for CueChannel {
    fn clear(&mut self) {
        self.fixtures.clear();
        self.control = CueControl::INTENSITY;
        self.value.clear();
        self.fade.clear();
        self.delay.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CueChannel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CueChannel {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct CueValue {
    // message oneof groups
    pub value: ::std::option::Option<CueValue_oneof_value>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CueValue {
    fn default() -> &'a CueValue {
        <CueValue as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum CueValue_oneof_value {
    direct(f64),
    range(CueValueRange),
}

impl CueValue {
    pub fn new() -> CueValue {
        ::std::default::Default::default()
    }

    // double direct = 3;


    pub fn get_direct(&self) -> f64 {
        match self.value {
            ::std::option::Option::Some(CueValue_oneof_value::direct(v)) => v,
            _ => 0.,
        }
    }
    pub fn clear_direct(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_direct(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(CueValue_oneof_value::direct(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_direct(&mut self, v: f64) {
        self.value = ::std::option::Option::Some(CueValue_oneof_value::direct(v))
    }

    // .mizer.sequencer.CueValueRange range = 4;


    pub fn get_range(&self) -> &CueValueRange {
        match self.value {
            ::std::option::Option::Some(CueValue_oneof_value::range(ref v)) => v,
            _ => <CueValueRange as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_range(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_range(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(CueValue_oneof_value::range(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_range(&mut self, v: CueValueRange) {
        self.value = ::std::option::Option::Some(CueValue_oneof_value::range(v))
    }

    // Mutable pointer to the field.
    pub fn mut_range(&mut self) -> &mut CueValueRange {
        if let ::std::option::Option::Some(CueValue_oneof_value::range(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(CueValue_oneof_value::range(CueValueRange::new()));
        }
        match self.value {
            ::std::option::Option::Some(CueValue_oneof_value::range(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_range(&mut self) -> CueValueRange {
        if self.has_range() {
            match self.value.take() {
                ::std::option::Option::Some(CueValue_oneof_value::range(v)) => v,
                _ => panic!(),
            }
        } else {
            CueValueRange::new()
        }
    }
}

impl ::protobuf::Message for CueValue {
    fn is_initialized(&self) -> bool {
        if let Some(CueValue_oneof_value::range(ref v)) = self.value {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(CueValue_oneof_value::direct(is.read_double()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(CueValue_oneof_value::range(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &CueValue_oneof_value::direct(v) => {
                    my_size += 9;
                },
                &CueValue_oneof_value::range(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &CueValue_oneof_value::direct(v) => {
                    os.write_double(3, v)?;
                },
                &CueValue_oneof_value::range(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CueValue {
        CueValue::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor::<_>(
                "direct",
                CueValue::has_direct,
                CueValue::get_direct,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CueValueRange>(
                "range",
                CueValue::has_range,
                CueValue::get_range,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CueValue>(
                "CueValue",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CueValue {
        static instance: ::protobuf::rt::LazyV2<CueValue> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CueValue::new)
    }
}

impl ::protobuf::Clear for CueValue {
    fn clear(&mut self) {
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CueValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CueValue {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct CueTimer {
    // message fields
    pub hasTimer: bool,
    // message oneof groups
    pub timer: ::std::option::Option<CueTimer_oneof_timer>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CueTimer {
    fn default() -> &'a CueTimer {
        <CueTimer as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum CueTimer_oneof_timer {
    direct(CueTime),
    range(CueTimerRange),
}

impl CueTimer {
    pub fn new() -> CueTimer {
        ::std::default::Default::default()
    }

    // bool hasTimer = 1;


    pub fn get_hasTimer(&self) -> bool {
        self.hasTimer
    }
    pub fn clear_hasTimer(&mut self) {
        self.hasTimer = false;
    }

    // Param is passed by value, moved
    pub fn set_hasTimer(&mut self, v: bool) {
        self.hasTimer = v;
    }

    // .mizer.sequencer.CueTime direct = 2;


    pub fn get_direct(&self) -> &CueTime {
        match self.timer {
            ::std::option::Option::Some(CueTimer_oneof_timer::direct(ref v)) => v,
            _ => <CueTime as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_direct(&mut self) {
        self.timer = ::std::option::Option::None;
    }

    pub fn has_direct(&self) -> bool {
        match self.timer {
            ::std::option::Option::Some(CueTimer_oneof_timer::direct(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_direct(&mut self, v: CueTime) {
        self.timer = ::std::option::Option::Some(CueTimer_oneof_timer::direct(v))
    }

    // Mutable pointer to the field.
    pub fn mut_direct(&mut self) -> &mut CueTime {
        if let ::std::option::Option::Some(CueTimer_oneof_timer::direct(_)) = self.timer {
        } else {
            self.timer = ::std::option::Option::Some(CueTimer_oneof_timer::direct(CueTime::new()));
        }
        match self.timer {
            ::std::option::Option::Some(CueTimer_oneof_timer::direct(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_direct(&mut self) -> CueTime {
        if self.has_direct() {
            match self.timer.take() {
                ::std::option::Option::Some(CueTimer_oneof_timer::direct(v)) => v,
                _ => panic!(),
            }
        } else {
            CueTime::new()
        }
    }

    // .mizer.sequencer.CueTimerRange range = 3;


    pub fn get_range(&self) -> &CueTimerRange {
        match self.timer {
            ::std::option::Option::Some(CueTimer_oneof_timer::range(ref v)) => v,
            _ => <CueTimerRange as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_range(&mut self) {
        self.timer = ::std::option::Option::None;
    }

    pub fn has_range(&self) -> bool {
        match self.timer {
            ::std::option::Option::Some(CueTimer_oneof_timer::range(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_range(&mut self, v: CueTimerRange) {
        self.timer = ::std::option::Option::Some(CueTimer_oneof_timer::range(v))
    }

    // Mutable pointer to the field.
    pub fn mut_range(&mut self) -> &mut CueTimerRange {
        if let ::std::option::Option::Some(CueTimer_oneof_timer::range(_)) = self.timer {
        } else {
            self.timer = ::std::option::Option::Some(CueTimer_oneof_timer::range(CueTimerRange::new()));
        }
        match self.timer {
            ::std::option::Option::Some(CueTimer_oneof_timer::range(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_range(&mut self) -> CueTimerRange {
        if self.has_range() {
            match self.timer.take() {
                ::std::option::Option::Some(CueTimer_oneof_timer::range(v)) => v,
                _ => panic!(),
            }
        } else {
            CueTimerRange::new()
        }
    }
}

impl ::protobuf::Message for CueTimer {
    fn is_initialized(&self) -> bool {
        if let Some(CueTimer_oneof_timer::direct(ref v)) = self.timer {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(CueTimer_oneof_timer::range(ref v)) = self.timer {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.hasTimer = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.timer = ::std::option::Option::Some(CueTimer_oneof_timer::direct(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.timer = ::std::option::Option::Some(CueTimer_oneof_timer::range(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.hasTimer != false {
            my_size += 2;
        }
        if let ::std::option::Option::Some(ref v) = self.timer {
            match v {
                &CueTimer_oneof_timer::direct(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &CueTimer_oneof_timer::range(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.hasTimer != false {
            os.write_bool(1, self.hasTimer)?;
        }
        if let ::std::option::Option::Some(ref v) = self.timer {
            match v {
                &CueTimer_oneof_timer::direct(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &CueTimer_oneof_timer::range(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CueTimer {
        CueTimer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "hasTimer",
                |m: &CueTimer| { &m.hasTimer },
                |m: &mut CueTimer| { &mut m.hasTimer },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CueTime>(
                "direct",
                CueTimer::has_direct,
                CueTimer::get_direct,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CueTimerRange>(
                "range",
                CueTimer::has_range,
                CueTimer::get_range,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CueTimer>(
                "CueTimer",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CueTimer {
        static instance: ::protobuf::rt::LazyV2<CueTimer> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CueTimer::new)
    }
}

impl ::protobuf::Clear for CueTimer {
    fn clear(&mut self) {
        self.hasTimer = false;
        self.timer = ::std::option::Option::None;
        self.timer = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CueTimer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CueTimer {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct CueValueRange {
    // message fields
    pub from: f64,
    pub to: f64,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CueValueRange {
    fn default() -> &'a CueValueRange {
        <CueValueRange as ::protobuf::Message>::default_instance()
    }
}

impl CueValueRange {
    pub fn new() -> CueValueRange {
        ::std::default::Default::default()
    }

    // double from = 1;


    pub fn get_from(&self) -> f64 {
        self.from
    }
    pub fn clear_from(&mut self) {
        self.from = 0.;
    }

    // Param is passed by value, moved
    pub fn set_from(&mut self, v: f64) {
        self.from = v;
    }

    // double to = 2;


    pub fn get_to(&self) -> f64 {
        self.to
    }
    pub fn clear_to(&mut self) {
        self.to = 0.;
    }

    // Param is passed by value, moved
    pub fn set_to(&mut self, v: f64) {
        self.to = v;
    }
}

impl ::protobuf::Message for CueValueRange {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.from = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.to = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.from != 0. {
            my_size += 9;
        }
        if self.to != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.from != 0. {
            os.write_double(1, self.from)?;
        }
        if self.to != 0. {
            os.write_double(2, self.to)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CueValueRange {
        CueValueRange::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "from",
                |m: &CueValueRange| { &m.from },
                |m: &mut CueValueRange| { &mut m.from },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "to",
                |m: &CueValueRange| { &m.to },
                |m: &mut CueValueRange| { &mut m.to },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CueValueRange>(
                "CueValueRange",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CueValueRange {
        static instance: ::protobuf::rt::LazyV2<CueValueRange> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CueValueRange::new)
    }
}

impl ::protobuf::Clear for CueValueRange {
    fn clear(&mut self) {
        self.from = 0.;
        self.to = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CueValueRange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CueValueRange {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct CueTime {
    // message oneof groups
    pub time: ::std::option::Option<CueTime_oneof_time>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CueTime {
    fn default() -> &'a CueTime {
        <CueTime as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum CueTime_oneof_time {
    seconds(f64),
    beats(f64),
}

impl CueTime {
    pub fn new() -> CueTime {
        ::std::default::Default::default()
    }

    // double seconds = 1;


    pub fn get_seconds(&self) -> f64 {
        match self.time {
            ::std::option::Option::Some(CueTime_oneof_time::seconds(v)) => v,
            _ => 0.,
        }
    }
    pub fn clear_seconds(&mut self) {
        self.time = ::std::option::Option::None;
    }

    pub fn has_seconds(&self) -> bool {
        match self.time {
            ::std::option::Option::Some(CueTime_oneof_time::seconds(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_seconds(&mut self, v: f64) {
        self.time = ::std::option::Option::Some(CueTime_oneof_time::seconds(v))
    }

    // double beats = 2;


    pub fn get_beats(&self) -> f64 {
        match self.time {
            ::std::option::Option::Some(CueTime_oneof_time::beats(v)) => v,
            _ => 0.,
        }
    }
    pub fn clear_beats(&mut self) {
        self.time = ::std::option::Option::None;
    }

    pub fn has_beats(&self) -> bool {
        match self.time {
            ::std::option::Option::Some(CueTime_oneof_time::beats(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_beats(&mut self, v: f64) {
        self.time = ::std::option::Option::Some(CueTime_oneof_time::beats(v))
    }
}

impl ::protobuf::Message for CueTime {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.time = ::std::option::Option::Some(CueTime_oneof_time::seconds(is.read_double()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.time = ::std::option::Option::Some(CueTime_oneof_time::beats(is.read_double()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.time {
            match v {
                &CueTime_oneof_time::seconds(v) => {
                    my_size += 9;
                },
                &CueTime_oneof_time::beats(v) => {
                    my_size += 9;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.time {
            match v {
                &CueTime_oneof_time::seconds(v) => {
                    os.write_double(1, v)?;
                },
                &CueTime_oneof_time::beats(v) => {
                    os.write_double(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CueTime {
        CueTime::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor::<_>(
                "seconds",
                CueTime::has_seconds,
                CueTime::get_seconds,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor::<_>(
                "beats",
                CueTime::has_beats,
                CueTime::get_beats,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CueTime>(
                "CueTime",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CueTime {
        static instance: ::protobuf::rt::LazyV2<CueTime> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CueTime::new)
    }
}

impl ::protobuf::Clear for CueTime {
    fn clear(&mut self) {
        self.time = ::std::option::Option::None;
        self.time = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CueTime {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CueTime {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct CueTimerRange {
    // message fields
    pub from: ::protobuf::SingularPtrField<CueTime>,
    pub to: ::protobuf::SingularPtrField<CueTime>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CueTimerRange {
    fn default() -> &'a CueTimerRange {
        <CueTimerRange as ::protobuf::Message>::default_instance()
    }
}

impl CueTimerRange {
    pub fn new() -> CueTimerRange {
        ::std::default::Default::default()
    }

    // .mizer.sequencer.CueTime from = 1;


    pub fn get_from(&self) -> &CueTime {
        self.from.as_ref().unwrap_or_else(|| <CueTime as ::protobuf::Message>::default_instance())
    }
    pub fn clear_from(&mut self) {
        self.from.clear();
    }

    pub fn has_from(&self) -> bool {
        self.from.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from(&mut self, v: CueTime) {
        self.from = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_from(&mut self) -> &mut CueTime {
        if self.from.is_none() {
            self.from.set_default();
        }
        self.from.as_mut().unwrap()
    }

    // Take field
    pub fn take_from(&mut self) -> CueTime {
        self.from.take().unwrap_or_else(|| CueTime::new())
    }

    // .mizer.sequencer.CueTime to = 2;


    pub fn get_to(&self) -> &CueTime {
        self.to.as_ref().unwrap_or_else(|| <CueTime as ::protobuf::Message>::default_instance())
    }
    pub fn clear_to(&mut self) {
        self.to.clear();
    }

    pub fn has_to(&self) -> bool {
        self.to.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to(&mut self, v: CueTime) {
        self.to = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_to(&mut self) -> &mut CueTime {
        if self.to.is_none() {
            self.to.set_default();
        }
        self.to.as_mut().unwrap()
    }

    // Take field
    pub fn take_to(&mut self) -> CueTime {
        self.to.take().unwrap_or_else(|| CueTime::new())
    }
}

impl ::protobuf::Message for CueTimerRange {
    fn is_initialized(&self) -> bool {
        for v in &self.from {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.to {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.from)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.to)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.from.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.to.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.from.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.to.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CueTimerRange {
        CueTimerRange::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CueTime>>(
                "from",
                |m: &CueTimerRange| { &m.from },
                |m: &mut CueTimerRange| { &mut m.from },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CueTime>>(
                "to",
                |m: &CueTimerRange| { &m.to },
                |m: &mut CueTimerRange| { &mut m.to },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CueTimerRange>(
                "CueTimerRange",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CueTimerRange {
        static instance: ::protobuf::rt::LazyV2<CueTimerRange> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CueTimerRange::new)
    }
}

impl ::protobuf::Clear for CueTimerRange {
    fn clear(&mut self) {
        self.from.clear();
        self.to.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CueTimerRange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CueTimerRange {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum CueTrigger {
    GO = 0,
    FOLLOW = 1,
    TIME = 2,
    BEATS = 3,
    TIMECODE = 4,
}

impl ::protobuf::ProtobufEnum for CueTrigger {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CueTrigger> {
        match value {
            0 => ::std::option::Option::Some(CueTrigger::GO),
            1 => ::std::option::Option::Some(CueTrigger::FOLLOW),
            2 => ::std::option::Option::Some(CueTrigger::TIME),
            3 => ::std::option::Option::Some(CueTrigger::BEATS),
            4 => ::std::option::Option::Some(CueTrigger::TIMECODE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CueTrigger] = &[
            CueTrigger::GO,
            CueTrigger::FOLLOW,
            CueTrigger::TIME,
            CueTrigger::BEATS,
            CueTrigger::TIMECODE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<CueTrigger>("CueTrigger", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for CueTrigger {
}

impl ::std::default::Default for CueTrigger {
    fn default() -> Self {
        CueTrigger::GO
    }
}

impl ::protobuf::reflect::ProtobufValue for CueTrigger {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum CueControl {
    INTENSITY = 0,
    SHUTTER = 1,
    COLOR_RED = 2,
    COLOR_GREEN = 3,
    COLOR_BLUE = 4,
    PAN = 5,
    TILT = 6,
    FOCUS = 7,
    ZOOM = 8,
    PRISM = 9,
    IRIS = 10,
    FROST = 11,
    GENERIC = 12,
}

impl ::protobuf::ProtobufEnum for CueControl {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CueControl> {
        match value {
            0 => ::std::option::Option::Some(CueControl::INTENSITY),
            1 => ::std::option::Option::Some(CueControl::SHUTTER),
            2 => ::std::option::Option::Some(CueControl::COLOR_RED),
            3 => ::std::option::Option::Some(CueControl::COLOR_GREEN),
            4 => ::std::option::Option::Some(CueControl::COLOR_BLUE),
            5 => ::std::option::Option::Some(CueControl::PAN),
            6 => ::std::option::Option::Some(CueControl::TILT),
            7 => ::std::option::Option::Some(CueControl::FOCUS),
            8 => ::std::option::Option::Some(CueControl::ZOOM),
            9 => ::std::option::Option::Some(CueControl::PRISM),
            10 => ::std::option::Option::Some(CueControl::IRIS),
            11 => ::std::option::Option::Some(CueControl::FROST),
            12 => ::std::option::Option::Some(CueControl::GENERIC),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CueControl] = &[
            CueControl::INTENSITY,
            CueControl::SHUTTER,
            CueControl::COLOR_RED,
            CueControl::COLOR_GREEN,
            CueControl::COLOR_BLUE,
            CueControl::PAN,
            CueControl::TILT,
            CueControl::FOCUS,
            CueControl::ZOOM,
            CueControl::PRISM,
            CueControl::IRIS,
            CueControl::FROST,
            CueControl::GENERIC,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<CueControl>("CueControl", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for CueControl {
}

impl ::std::default::Default for CueControl {
    fn default() -> Self {
        CueControl::INTENSITY
    }
}

impl ::protobuf::reflect::ProtobufValue for CueControl {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fsequencer.proto\x12\x0fmizer.sequencer\x1a\x0efixtures.proto\"\x15\
    \n\x13GetSequencesRequest\"0\n\x12GetSequenceRequest\x12\x1a\n\x08sequen\
    ce\x18\x01\x20\x01(\rR\x08sequence\"\x14\n\x12AddSequenceRequest\"3\n\
    \x15DeleteSequenceRequest\x12\x1a\n\x08sequence\x18\x01\x20\x01(\rR\x08s\
    equence\"/\n\x11SequenceGoRequest\x12\x1a\n\x08sequence\x18\x01\x20\x01(\
    \rR\x08sequence\"x\n\x11CueTriggerRequest\x12\x1a\n\x08sequence\x18\x01\
    \x20\x01(\rR\x08sequence\x12\x10\n\x03cue\x18\x02\x20\x01(\rR\x03cue\x12\
    5\n\x07trigger\x18\x03\x20\x01(\x0e2\x1b.mizer.sequencer.CueTriggerR\x07\
    trigger\"\x0f\n\rEmptyResponse\"D\n\tSequences\x127\n\tsequences\x18\x01\
    \x20\x03(\x0b2\x19.mizer.sequencer.SequenceR\tsequences\"X\n\x08Sequence\
    \x12\x0e\n\x02id\x18\x01\x20\x01(\rR\x02id\x12\x12\n\x04name\x18\x02\x20\
    \x01(\tR\x04name\x12(\n\x04cues\x18\x03\x20\x03(\x0b2\x14.mizer.sequence\
    r.CueR\x04cues\"\xad\x01\n\x03Cue\x12\x0e\n\x02id\x18\x01\x20\x01(\rR\
    \x02id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x125\n\x07trigger\
    \x18\x03\x20\x01(\x0e2\x1b.mizer.sequencer.CueTriggerR\x07trigger\x12\
    \x12\n\x04loop\x18\x04\x20\x01(\x08R\x04loop\x127\n\x08channels\x18\x05\
    \x20\x03(\x0b2\x1b.mizer.sequencer.CueChannelR\x08channels\"\x8b\x02\n\n\
    CueChannel\x125\n\x08fixtures\x18\x01\x20\x03(\x0b2\x19.mizer.fixtures.F\
    ixtureIdR\x08fixtures\x125\n\x07control\x18\x02\x20\x01(\x0e2\x1b.mizer.\
    sequencer.CueControlR\x07control\x12/\n\x05value\x18\x03\x20\x01(\x0b2\
    \x19.mizer.sequencer.CueValueR\x05value\x12-\n\x04fade\x18\x04\x20\x01(\
    \x0b2\x19.mizer.sequencer.CueTimerR\x04fade\x12/\n\x05delay\x18\x05\x20\
    \x01(\x0b2\x19.mizer.sequencer.CueTimerR\x05delay\"e\n\x08CueValue\x12\
    \x18\n\x06direct\x18\x03\x20\x01(\x01H\0R\x06direct\x126\n\x05range\x18\
    \x04\x20\x01(\x0b2\x1e.mizer.sequencer.CueValueRangeH\0R\x05rangeB\x07\n\
    \x05value\"\x9b\x01\n\x08CueTimer\x12\x1a\n\x08hasTimer\x18\x01\x20\x01(\
    \x08R\x08hasTimer\x122\n\x06direct\x18\x02\x20\x01(\x0b2\x18.mizer.seque\
    ncer.CueTimeH\0R\x06direct\x126\n\x05range\x18\x03\x20\x01(\x0b2\x1e.miz\
    er.sequencer.CueTimerRangeH\0R\x05rangeB\x07\n\x05timer\"3\n\rCueValueRa\
    nge\x12\x12\n\x04from\x18\x01\x20\x01(\x01R\x04from\x12\x0e\n\x02to\x18\
    \x02\x20\x01(\x01R\x02to\"E\n\x07CueTime\x12\x1a\n\x07seconds\x18\x01\
    \x20\x01(\x01H\0R\x07seconds\x12\x16\n\x05beats\x18\x02\x20\x01(\x01H\0R\
    \x05beatsB\x06\n\x04time\"g\n\rCueTimerRange\x12,\n\x04from\x18\x01\x20\
    \x01(\x0b2\x18.mizer.sequencer.CueTimeR\x04from\x12(\n\x02to\x18\x02\x20\
    \x01(\x0b2\x18.mizer.sequencer.CueTimeR\x02to*C\n\nCueTrigger\x12\x06\n\
    \x02GO\x10\0\x12\n\n\x06FOLLOW\x10\x01\x12\x08\n\x04TIME\x10\x02\x12\t\n\
    \x05BEATS\x10\x03\x12\x0c\n\x08TIMECODE\x10\x04*\xad\x01\n\nCueControl\
    \x12\r\n\tINTENSITY\x10\0\x12\x0b\n\x07SHUTTER\x10\x01\x12\r\n\tCOLOR_RE\
    D\x10\x02\x12\x0f\n\x0bCOLOR_GREEN\x10\x03\x12\x0e\n\nCOLOR_BLUE\x10\x04\
    \x12\x07\n\x03PAN\x10\x05\x12\x08\n\x04TILT\x10\x06\x12\t\n\x05FOCUS\x10\
    \x07\x12\x08\n\x04ZOOM\x10\x08\x12\t\n\x05PRISM\x10\t\x12\x08\n\x04IRIS\
    \x10\n\x12\t\n\x05FROST\x10\x0b\x12\x0b\n\x07GENERIC\x10\x0c2\x86\x04\n\
    \x0cSequencerApi\x12R\n\x0cGetSequences\x12$.mizer.sequencer.GetSequence\
    sRequest\x1a\x1a.mizer.sequencer.Sequences\"\0\x12O\n\x0bGetSequence\x12\
    #.mizer.sequencer.GetSequenceRequest\x1a\x19.mizer.sequencer.Sequence\"\
    \0\x12O\n\x0bAddSequence\x12#.mizer.sequencer.AddSequenceRequest\x1a\x19\
    .mizer.sequencer.Sequence\"\0\x12V\n\x0eDeleteSequence\x12&.mizer.sequen\
    cer.DeleteSequenceRequest\x1a\x1a.mizer.sequencer.Sequences\"\0\x12R\n\n\
    SequenceGo\x12\".mizer.sequencer.SequenceGoRequest\x1a\x1e.mizer.sequenc\
    er.EmptyResponse\"\0\x12T\n\x10UpdateCueTrigger\x12\".mizer.sequencer.Cu\
    eTriggerRequest\x1a\x1a.mizer.sequencer.Sequences\"\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
