// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `settings.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct RequestSettings {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestSettings {
    fn default() -> &'a RequestSettings {
        <RequestSettings as ::protobuf::Message>::default_instance()
    }
}

impl RequestSettings {
    pub fn new() -> RequestSettings {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for RequestSettings {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestSettings {
        RequestSettings::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestSettings>(
                "RequestSettings",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestSettings {
        static instance: ::protobuf::rt::LazyV2<RequestSettings> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestSettings::new)
    }
}

impl ::protobuf::Clear for RequestSettings {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestSettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestSettings {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Settings {
    // message fields
    pub hotkeys: ::protobuf::SingularPtrField<Hotkeys>,
    pub paths: ::protobuf::SingularPtrField<PathSettings>,
    pub general: ::protobuf::SingularPtrField<General>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Settings {
    fn default() -> &'a Settings {
        <Settings as ::protobuf::Message>::default_instance()
    }
}

impl Settings {
    pub fn new() -> Settings {
        ::std::default::Default::default()
    }

    // .mizer.settings.Hotkeys hotkeys = 1;


    pub fn get_hotkeys(&self) -> &Hotkeys {
        self.hotkeys.as_ref().unwrap_or_else(|| <Hotkeys as ::protobuf::Message>::default_instance())
    }
    pub fn clear_hotkeys(&mut self) {
        self.hotkeys.clear();
    }

    pub fn has_hotkeys(&self) -> bool {
        self.hotkeys.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hotkeys(&mut self, v: Hotkeys) {
        self.hotkeys = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hotkeys(&mut self) -> &mut Hotkeys {
        if self.hotkeys.is_none() {
            self.hotkeys.set_default();
        }
        self.hotkeys.as_mut().unwrap()
    }

    // Take field
    pub fn take_hotkeys(&mut self) -> Hotkeys {
        self.hotkeys.take().unwrap_or_else(|| Hotkeys::new())
    }

    // .mizer.settings.PathSettings paths = 2;


    pub fn get_paths(&self) -> &PathSettings {
        self.paths.as_ref().unwrap_or_else(|| <PathSettings as ::protobuf::Message>::default_instance())
    }
    pub fn clear_paths(&mut self) {
        self.paths.clear();
    }

    pub fn has_paths(&self) -> bool {
        self.paths.is_some()
    }

    // Param is passed by value, moved
    pub fn set_paths(&mut self, v: PathSettings) {
        self.paths = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_paths(&mut self) -> &mut PathSettings {
        if self.paths.is_none() {
            self.paths.set_default();
        }
        self.paths.as_mut().unwrap()
    }

    // Take field
    pub fn take_paths(&mut self) -> PathSettings {
        self.paths.take().unwrap_or_else(|| PathSettings::new())
    }

    // .mizer.settings.General general = 3;


    pub fn get_general(&self) -> &General {
        self.general.as_ref().unwrap_or_else(|| <General as ::protobuf::Message>::default_instance())
    }
    pub fn clear_general(&mut self) {
        self.general.clear();
    }

    pub fn has_general(&self) -> bool {
        self.general.is_some()
    }

    // Param is passed by value, moved
    pub fn set_general(&mut self, v: General) {
        self.general = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_general(&mut self) -> &mut General {
        if self.general.is_none() {
            self.general.set_default();
        }
        self.general.as_mut().unwrap()
    }

    // Take field
    pub fn take_general(&mut self) -> General {
        self.general.take().unwrap_or_else(|| General::new())
    }
}

impl ::protobuf::Message for Settings {
    fn is_initialized(&self) -> bool {
        for v in &self.hotkeys {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.paths {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.general {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.hotkeys)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.paths)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.general)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.hotkeys.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.paths.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.general.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.hotkeys.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.paths.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.general.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Settings {
        Settings::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Hotkeys>>(
                "hotkeys",
                |m: &Settings| { &m.hotkeys },
                |m: &mut Settings| { &mut m.hotkeys },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PathSettings>>(
                "paths",
                |m: &Settings| { &m.paths },
                |m: &mut Settings| { &mut m.paths },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<General>>(
                "general",
                |m: &Settings| { &m.general },
                |m: &mut Settings| { &mut m.general },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Settings>(
                "Settings",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Settings {
        static instance: ::protobuf::rt::LazyV2<Settings> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Settings::new)
    }
}

impl ::protobuf::Clear for Settings {
    fn clear(&mut self) {
        self.hotkeys.clear();
        self.paths.clear();
        self.general.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Settings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Settings {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct PathSettings {
    // message fields
    pub midi_device_profiles: ::std::string::String,
    // message oneof groups
    pub _open_fixture_library: ::std::option::Option<PathSettings_oneof__open_fixture_library>,
    pub _qlcplus: ::std::option::Option<PathSettings_oneof__qlcplus>,
    pub _gdtf: ::std::option::Option<PathSettings_oneof__gdtf>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PathSettings {
    fn default() -> &'a PathSettings {
        <PathSettings as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum PathSettings_oneof__open_fixture_library {
    open_fixture_library(::std::string::String),
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum PathSettings_oneof__qlcplus {
    qlcplus(::std::string::String),
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum PathSettings_oneof__gdtf {
    gdtf(::std::string::String),
}

impl PathSettings {
    pub fn new() -> PathSettings {
        ::std::default::Default::default()
    }

    // string midi_device_profiles = 1;


    pub fn get_midi_device_profiles(&self) -> &str {
        &self.midi_device_profiles
    }
    pub fn clear_midi_device_profiles(&mut self) {
        self.midi_device_profiles.clear();
    }

    // Param is passed by value, moved
    pub fn set_midi_device_profiles(&mut self, v: ::std::string::String) {
        self.midi_device_profiles = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_midi_device_profiles(&mut self) -> &mut ::std::string::String {
        &mut self.midi_device_profiles
    }

    // Take field
    pub fn take_midi_device_profiles(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.midi_device_profiles, ::std::string::String::new())
    }

    // string open_fixture_library = 2;


    pub fn get_open_fixture_library(&self) -> &str {
        match self._open_fixture_library {
            ::std::option::Option::Some(PathSettings_oneof__open_fixture_library::open_fixture_library(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_open_fixture_library(&mut self) {
        self._open_fixture_library = ::std::option::Option::None;
    }

    pub fn has_open_fixture_library(&self) -> bool {
        match self._open_fixture_library {
            ::std::option::Option::Some(PathSettings_oneof__open_fixture_library::open_fixture_library(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_open_fixture_library(&mut self, v: ::std::string::String) {
        self._open_fixture_library = ::std::option::Option::Some(PathSettings_oneof__open_fixture_library::open_fixture_library(v))
    }

    // Mutable pointer to the field.
    pub fn mut_open_fixture_library(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(PathSettings_oneof__open_fixture_library::open_fixture_library(_)) = self._open_fixture_library {
        } else {
            self._open_fixture_library = ::std::option::Option::Some(PathSettings_oneof__open_fixture_library::open_fixture_library(::std::string::String::new()));
        }
        match self._open_fixture_library {
            ::std::option::Option::Some(PathSettings_oneof__open_fixture_library::open_fixture_library(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_open_fixture_library(&mut self) -> ::std::string::String {
        if self.has_open_fixture_library() {
            match self._open_fixture_library.take() {
                ::std::option::Option::Some(PathSettings_oneof__open_fixture_library::open_fixture_library(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string qlcplus = 3;


    pub fn get_qlcplus(&self) -> &str {
        match self._qlcplus {
            ::std::option::Option::Some(PathSettings_oneof__qlcplus::qlcplus(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_qlcplus(&mut self) {
        self._qlcplus = ::std::option::Option::None;
    }

    pub fn has_qlcplus(&self) -> bool {
        match self._qlcplus {
            ::std::option::Option::Some(PathSettings_oneof__qlcplus::qlcplus(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_qlcplus(&mut self, v: ::std::string::String) {
        self._qlcplus = ::std::option::Option::Some(PathSettings_oneof__qlcplus::qlcplus(v))
    }

    // Mutable pointer to the field.
    pub fn mut_qlcplus(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(PathSettings_oneof__qlcplus::qlcplus(_)) = self._qlcplus {
        } else {
            self._qlcplus = ::std::option::Option::Some(PathSettings_oneof__qlcplus::qlcplus(::std::string::String::new()));
        }
        match self._qlcplus {
            ::std::option::Option::Some(PathSettings_oneof__qlcplus::qlcplus(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_qlcplus(&mut self) -> ::std::string::String {
        if self.has_qlcplus() {
            match self._qlcplus.take() {
                ::std::option::Option::Some(PathSettings_oneof__qlcplus::qlcplus(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string gdtf = 4;


    pub fn get_gdtf(&self) -> &str {
        match self._gdtf {
            ::std::option::Option::Some(PathSettings_oneof__gdtf::gdtf(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_gdtf(&mut self) {
        self._gdtf = ::std::option::Option::None;
    }

    pub fn has_gdtf(&self) -> bool {
        match self._gdtf {
            ::std::option::Option::Some(PathSettings_oneof__gdtf::gdtf(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_gdtf(&mut self, v: ::std::string::String) {
        self._gdtf = ::std::option::Option::Some(PathSettings_oneof__gdtf::gdtf(v))
    }

    // Mutable pointer to the field.
    pub fn mut_gdtf(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(PathSettings_oneof__gdtf::gdtf(_)) = self._gdtf {
        } else {
            self._gdtf = ::std::option::Option::Some(PathSettings_oneof__gdtf::gdtf(::std::string::String::new()));
        }
        match self._gdtf {
            ::std::option::Option::Some(PathSettings_oneof__gdtf::gdtf(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_gdtf(&mut self) -> ::std::string::String {
        if self.has_gdtf() {
            match self._gdtf.take() {
                ::std::option::Option::Some(PathSettings_oneof__gdtf::gdtf(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for PathSettings {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.midi_device_profiles)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self._open_fixture_library = ::std::option::Option::Some(PathSettings_oneof__open_fixture_library::open_fixture_library(is.read_string()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self._qlcplus = ::std::option::Option::Some(PathSettings_oneof__qlcplus::qlcplus(is.read_string()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self._gdtf = ::std::option::Option::Some(PathSettings_oneof__gdtf::gdtf(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.midi_device_profiles.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.midi_device_profiles);
        }
        if let ::std::option::Option::Some(ref v) = self._open_fixture_library {
            match v {
                &PathSettings_oneof__open_fixture_library::open_fixture_library(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self._qlcplus {
            match v {
                &PathSettings_oneof__qlcplus::qlcplus(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self._gdtf {
            match v {
                &PathSettings_oneof__gdtf::gdtf(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.midi_device_profiles.is_empty() {
            os.write_string(1, &self.midi_device_profiles)?;
        }
        if let ::std::option::Option::Some(ref v) = self._open_fixture_library {
            match v {
                &PathSettings_oneof__open_fixture_library::open_fixture_library(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self._qlcplus {
            match v {
                &PathSettings_oneof__qlcplus::qlcplus(ref v) => {
                    os.write_string(3, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self._gdtf {
            match v {
                &PathSettings_oneof__gdtf::gdtf(ref v) => {
                    os.write_string(4, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PathSettings {
        PathSettings::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "midi_device_profiles",
                |m: &PathSettings| { &m.midi_device_profiles },
                |m: &mut PathSettings| { &mut m.midi_device_profiles },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "open_fixture_library",
                PathSettings::has_open_fixture_library,
                PathSettings::get_open_fixture_library,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "qlcplus",
                PathSettings::has_qlcplus,
                PathSettings::get_qlcplus,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "gdtf",
                PathSettings::has_gdtf,
                PathSettings::get_gdtf,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PathSettings>(
                "PathSettings",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PathSettings {
        static instance: ::protobuf::rt::LazyV2<PathSettings> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PathSettings::new)
    }
}

impl ::protobuf::Clear for PathSettings {
    fn clear(&mut self) {
        self.midi_device_profiles.clear();
        self._open_fixture_library = ::std::option::Option::None;
        self._qlcplus = ::std::option::Option::None;
        self._gdtf = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PathSettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PathSettings {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Hotkeys {
    // message fields
    pub global: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub layouts: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub programmer: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub nodes: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub patch: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub sequencer: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub plan: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub effects: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Hotkeys {
    fn default() -> &'a Hotkeys {
        <Hotkeys as ::protobuf::Message>::default_instance()
    }
}

impl Hotkeys {
    pub fn new() -> Hotkeys {
        ::std::default::Default::default()
    }

    // repeated .mizer.settings.Hotkeys.GlobalEntry global = 1;


    pub fn get_global(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.global
    }
    pub fn clear_global(&mut self) {
        self.global.clear();
    }

    // Param is passed by value, moved
    pub fn set_global(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.global = v;
    }

    // Mutable pointer to the field.
    pub fn mut_global(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.global
    }

    // Take field
    pub fn take_global(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.global, ::std::collections::HashMap::new())
    }

    // repeated .mizer.settings.Hotkeys.LayoutsEntry layouts = 2;


    pub fn get_layouts(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.layouts
    }
    pub fn clear_layouts(&mut self) {
        self.layouts.clear();
    }

    // Param is passed by value, moved
    pub fn set_layouts(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.layouts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_layouts(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.layouts
    }

    // Take field
    pub fn take_layouts(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.layouts, ::std::collections::HashMap::new())
    }

    // repeated .mizer.settings.Hotkeys.ProgrammerEntry programmer = 3;


    pub fn get_programmer(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.programmer
    }
    pub fn clear_programmer(&mut self) {
        self.programmer.clear();
    }

    // Param is passed by value, moved
    pub fn set_programmer(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.programmer = v;
    }

    // Mutable pointer to the field.
    pub fn mut_programmer(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.programmer
    }

    // Take field
    pub fn take_programmer(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.programmer, ::std::collections::HashMap::new())
    }

    // repeated .mizer.settings.Hotkeys.NodesEntry nodes = 4;


    pub fn get_nodes(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.nodes
    }
    pub fn clear_nodes(&mut self) {
        self.nodes.clear();
    }

    // Param is passed by value, moved
    pub fn set_nodes(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.nodes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_nodes(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.nodes
    }

    // Take field
    pub fn take_nodes(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.nodes, ::std::collections::HashMap::new())
    }

    // repeated .mizer.settings.Hotkeys.PatchEntry patch = 5;


    pub fn get_patch(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.patch
    }
    pub fn clear_patch(&mut self) {
        self.patch.clear();
    }

    // Param is passed by value, moved
    pub fn set_patch(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.patch = v;
    }

    // Mutable pointer to the field.
    pub fn mut_patch(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.patch
    }

    // Take field
    pub fn take_patch(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.patch, ::std::collections::HashMap::new())
    }

    // repeated .mizer.settings.Hotkeys.SequencerEntry sequencer = 6;


    pub fn get_sequencer(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.sequencer
    }
    pub fn clear_sequencer(&mut self) {
        self.sequencer.clear();
    }

    // Param is passed by value, moved
    pub fn set_sequencer(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.sequencer = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sequencer(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.sequencer
    }

    // Take field
    pub fn take_sequencer(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.sequencer, ::std::collections::HashMap::new())
    }

    // repeated .mizer.settings.Hotkeys.PlanEntry plan = 7;


    pub fn get_plan(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.plan
    }
    pub fn clear_plan(&mut self) {
        self.plan.clear();
    }

    // Param is passed by value, moved
    pub fn set_plan(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.plan = v;
    }

    // Mutable pointer to the field.
    pub fn mut_plan(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.plan
    }

    // Take field
    pub fn take_plan(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.plan, ::std::collections::HashMap::new())
    }

    // repeated .mizer.settings.Hotkeys.EffectsEntry effects = 8;


    pub fn get_effects(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.effects
    }
    pub fn clear_effects(&mut self) {
        self.effects.clear();
    }

    // Param is passed by value, moved
    pub fn set_effects(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.effects = v;
    }

    // Mutable pointer to the field.
    pub fn mut_effects(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.effects
    }

    // Take field
    pub fn take_effects(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.effects, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for Hotkeys {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.global)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.layouts)?;
                },
                3 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.programmer)?;
                },
                4 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.nodes)?;
                },
                5 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.patch)?;
                },
                6 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.sequencer)?;
                },
                7 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.plan)?;
                },
                8 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.effects)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(1, &self.global);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(2, &self.layouts);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(3, &self.programmer);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(4, &self.nodes);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(5, &self.patch);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(6, &self.sequencer);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(7, &self.plan);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(8, &self.effects);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(1, &self.global, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(2, &self.layouts, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(3, &self.programmer, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(4, &self.nodes, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(5, &self.patch, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(6, &self.sequencer, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(7, &self.plan, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(8, &self.effects, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Hotkeys {
        Hotkeys::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "global",
                |m: &Hotkeys| { &m.global },
                |m: &mut Hotkeys| { &mut m.global },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "layouts",
                |m: &Hotkeys| { &m.layouts },
                |m: &mut Hotkeys| { &mut m.layouts },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "programmer",
                |m: &Hotkeys| { &m.programmer },
                |m: &mut Hotkeys| { &mut m.programmer },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "nodes",
                |m: &Hotkeys| { &m.nodes },
                |m: &mut Hotkeys| { &mut m.nodes },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "patch",
                |m: &Hotkeys| { &m.patch },
                |m: &mut Hotkeys| { &mut m.patch },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "sequencer",
                |m: &Hotkeys| { &m.sequencer },
                |m: &mut Hotkeys| { &mut m.sequencer },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "plan",
                |m: &Hotkeys| { &m.plan },
                |m: &mut Hotkeys| { &mut m.plan },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "effects",
                |m: &Hotkeys| { &m.effects },
                |m: &mut Hotkeys| { &mut m.effects },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Hotkeys>(
                "Hotkeys",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Hotkeys {
        static instance: ::protobuf::rt::LazyV2<Hotkeys> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Hotkeys::new)
    }
}

impl ::protobuf::Clear for Hotkeys {
    fn clear(&mut self) {
        self.global.clear();
        self.layouts.clear();
        self.programmer.clear();
        self.nodes.clear();
        self.patch.clear();
        self.sequencer.clear();
        self.plan.clear();
        self.effects.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Hotkeys {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Hotkeys {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct General {
    // message fields
    pub language: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a General {
    fn default() -> &'a General {
        <General as ::protobuf::Message>::default_instance()
    }
}

impl General {
    pub fn new() -> General {
        ::std::default::Default::default()
    }

    // string language = 1;


    pub fn get_language(&self) -> &str {
        &self.language
    }
    pub fn clear_language(&mut self) {
        self.language.clear();
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        &mut self.language
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.language, ::std::string::String::new())
    }
}

impl ::protobuf::Message for General {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.language)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.language.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.language);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.language.is_empty() {
            os.write_string(1, &self.language)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> General {
        General::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "language",
                |m: &General| { &m.language },
                |m: &mut General| { &mut m.language },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<General>(
                "General",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static General {
        static instance: ::protobuf::rt::LazyV2<General> = ::protobuf::rt::LazyV2::INIT;
        instance.get(General::new)
    }
}

impl ::protobuf::Clear for General {
    fn clear(&mut self) {
        self.language.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for General {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for General {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0esettings.proto\x12\x0emizer.settings\"\x11\n\x0fRequestSettings\"\
    \xa4\x01\n\x08Settings\x121\n\x07hotkeys\x18\x01\x20\x01(\x0b2\x17.mizer\
    .settings.HotkeysR\x07hotkeys\x122\n\x05paths\x18\x02\x20\x01(\x0b2\x1c.\
    mizer.settings.PathSettingsR\x05paths\x121\n\x07general\x18\x03\x20\x01(\
    \x0b2\x17.mizer.settings.GeneralR\x07general\"\xdd\x01\n\x0cPathSettings\
    \x120\n\x14midi_device_profiles\x18\x01\x20\x01(\tR\x12midiDeviceProfile\
    s\x125\n\x14open_fixture_library\x18\x02\x20\x01(\tH\0R\x12openFixtureLi\
    brary\x88\x01\x01\x12\x1d\n\x07qlcplus\x18\x03\x20\x01(\tH\x01R\x07qlcpl\
    us\x88\x01\x01\x12\x17\n\x04gdtf\x18\x04\x20\x01(\tH\x02R\x04gdtf\x88\
    \x01\x01B\x17\n\x15_open_fixture_libraryB\n\n\x08_qlcplusB\x07\n\x05_gdt\
    f\"\xdd\x07\n\x07Hotkeys\x12;\n\x06global\x18\x01\x20\x03(\x0b2#.mizer.s\
    ettings.Hotkeys.GlobalEntryR\x06global\x12>\n\x07layouts\x18\x02\x20\x03\
    (\x0b2$.mizer.settings.Hotkeys.LayoutsEntryR\x07layouts\x12G\n\nprogramm\
    er\x18\x03\x20\x03(\x0b2'.mizer.settings.Hotkeys.ProgrammerEntryR\nprogr\
    ammer\x128\n\x05nodes\x18\x04\x20\x03(\x0b2\".mizer.settings.Hotkeys.Nod\
    esEntryR\x05nodes\x128\n\x05patch\x18\x05\x20\x03(\x0b2\".mizer.settings\
    .Hotkeys.PatchEntryR\x05patch\x12D\n\tsequencer\x18\x06\x20\x03(\x0b2&.m\
    izer.settings.Hotkeys.SequencerEntryR\tsequencer\x125\n\x04plan\x18\x07\
    \x20\x03(\x0b2!.mizer.settings.Hotkeys.PlanEntryR\x04plan\x12>\n\x07effe\
    cts\x18\x08\x20\x03(\x0b2$.mizer.settings.Hotkeys.EffectsEntryR\x07effec\
    ts\x1a9\n\x0bGlobalEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\
    \x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\x1a:\n\x0cLayouts\
    Entry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\
    \x02\x20\x01(\tR\x05value:\x028\x01\x1a=\n\x0fProgrammerEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\t\
    R\x05value:\x028\x01\x1a8\n\nNodesEntry\x12\x10\n\x03key\x18\x01\x20\x01\
    (\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\
    \x1a8\n\nPatchEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\
    \n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\x1a<\n\x0eSequencerEn\
    try\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\
    \x02\x20\x01(\tR\x05value:\x028\x01\x1a7\n\tPlanEntry\x12\x10\n\x03key\
    \x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05va\
    lue:\x028\x01\x1a:\n\x0cEffectsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\t\
    R\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"%\n\
    \x07General\x12\x1a\n\x08language\x18\x01\x20\x01(\tR\x08language2\xa0\
    \x01\n\x0bSettingsApi\x12K\n\x0cLoadSettings\x12\x1f.mizer.settings.Requ\
    estSettings\x1a\x18.mizer.settings.Settings\"\0\x12D\n\x0cSaveSettings\
    \x12\x18.mizer.settings.Settings\x1a\x18.mizer.settings.Settings\"\0b\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
